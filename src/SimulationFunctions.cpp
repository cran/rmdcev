// Generated by rstantools.  Do not edit by hand.

// [[Rcpp::depends(StanHeaders)]]
// [[Rcpp::depends(rstan)]]
// [[Rcpp::depends(RcppEigen)]]
// [[Rcpp::depends(BH)]]
#include <stan/math/prim/fun/Eigen.hpp>
#include <stan/math/prim/meta.hpp>
#include <boost/integer/integer_log2.hpp>
#include <RcppEigen.h>
#ifndef USE_STANC3
#define USE_STANC3
#endif
// Code generated by %%NAME%% %%VERSION%%
#include <stan/model/model_header.hpp>
namespace model3a1435a46710_User_defined_functions_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 4, column 8 to column 13)",
                                                      " (in 'string', line 4, column 1 to column 19)",
                                                      " (in 'string', line 5, column 8 to column 13)",
                                                      " (in 'string', line 5, column 1 to column 71)",
                                                      " (in 'string', line 6, column 1 to column 41)",
                                                      " (in 'string', line 7, column 0 to column 12)",
                                                      " (in 'string', line 3, column 46 to line 8, column 1)",
                                                      " (in 'string', line 14, column 8 to column 13)",
                                                      " (in 'string', line 14, column 1 to column 21)",
                                                      " (in 'string', line 15, column 8 to column 13)",
                                                      " (in 'string', line 15, column 1 to column 44)",
                                                      " (in 'string', line 19, column 12 to column 17)",
                                                      " (in 'string', line 19, column 2 to column 19)",
                                                      " (in 'string', line 20, column 9 to column 14)",
                                                      " (in 'string', line 20, column 2 to column 21)",
                                                      " (in 'string', line 22, column 3 to column 24)",
                                                      " (in 'string', line 21, column 2 to line 22, column 24)",
                                                      " (in 'string', line 23, column 2 to column 34)",
                                                      " (in 'string', line 24, column 2 to column 77)",
                                                      " (in 'string', line 18, column 26 to line 25, column 2)",
                                                      " (in 'string', line 18, column 8 to line 25, column 2)",
                                                      " (in 'string', line 17, column 2 to column 43)",
                                                      " (in 'string', line 16, column 19 to line 18, column 2)",
                                                      " (in 'string', line 16, column 1 to line 25, column 2)",
                                                      " (in 'string', line 26, column 0 to column 14)",
                                                      " (in 'string', line 13, column 45 to line 27, column 1)",
                                                      " (in 'string', line 31, column 21 to column 26)",
                                                      " (in 'string', line 31, column 8 to column 15)",
                                                      " (in 'string', line 31, column 1 to column 28)",
                                                      " (in 'string', line 32, column 8 to column 13)",
                                                      " (in 'string', line 32, column 15 to column 22)",
                                                      " (in 'string', line 32, column 1 to column 30)",
                                                      " (in 'string', line 39, column 9 to column 18)",
                                                      " (in 'string', line 39, column 2 to column 65)",
                                                      " (in 'string', line 40, column 9 to column 18)",
                                                      " (in 'string', line 40, column 2 to column 23)",
                                                      " (in 'string', line 41, column 9 to column 14)",
                                                      " (in 'string', line 41, column 2 to column 19)",
                                                      " (in 'string', line 42, column 2 to column 44)",
                                                      " (in 'string', line 47, column 4 to column 77)",
                                                      " (in 'string', line 46, column 8 to line 47, column 77)",
                                                      " (in 'string', line 45, column 4 to column 86)",
                                                      " (in 'string', line 44, column 3 to line 47, column 77)",
                                                      " (in 'string', line 49, column 3 to column 41)",
                                                      " (in 'string', line 53, column 3 to line 54, column 76)",
                                                      " (in 'string', line 52, column 2 to line 54, column 76)",
                                                      " (in 'string', line 37, column 28 to line 55, column 2)",
                                                      " (in 'string', line 37, column 8 to line 55, column 2)",
                                                      " (in 'string', line 36, column 3 to column 68)",
                                                      " (in 'string', line 35, column 2 to line 36, column 68)",
                                                      " (in 'string', line 33, column 21 to line 37, column 2)",
                                                      " (in 'string', line 33, column 1 to line 55, column 2)",
                                                      " (in 'string', line 57, column 2 to column 25)",
                                                      " (in 'string', line 56, column 1 to line 57, column 25)",
                                                      " (in 'string', line 58, column 0 to column 12)",
                                                      " (in 'string', line 30, column 72 to line 59, column 1)",
                                                      " (in 'string', line 65, column 13 to column 20)",
                                                      " (in 'string', line 65, column 1 to column 22)",
                                                      " (in 'string', line 66, column 8 to column 13)",
                                                      " (in 'string', line 66, column 1 to column 24)",
                                                      " (in 'string', line 67, column 14 to column 19)",
                                                      " (in 'string', line 67, column 1 to column 60)",
                                                      " (in 'string', line 69, column 2 to column 18)",
                                                      " (in 'string', line 68, column 1 to line 69, column 18)",
                                                      " (in 'string', line 70, column 1 to column 80)",
                                                      " (in 'string', line 71, column 0 to column 16)",
                                                      " (in 'string', line 64, column 45 to line 72, column 1)",
                                                      " (in 'string', line 78, column 8 to column 15)",
                                                      " (in 'string', line 78, column 1 to column 32)",
                                                      " (in 'string', line 79, column 8 to column 13)",
                                                      " (in 'string', line 79, column 1 to column 40)",
                                                      " (in 'string', line 80, column 8 to column 13)",
                                                      " (in 'string', line 80, column 1 to column 42)",
                                                      " (in 'string', line 81, column 8 to column 13)",
                                                      " (in 'string', line 81, column 1 to column 42)",
                                                      " (in 'string', line 82, column 8 to column 13)",
                                                      " (in 'string', line 82, column 1 to column 50)",
                                                      " (in 'string', line 83, column 14 to column 19)",
                                                      " (in 'string', line 83, column 1 to column 47)",
                                                      " (in 'string', line 84, column 1 to line 86, column 104)",
                                                      " (in 'string', line 87, column 0 to column 20)",
                                                      " (in 'string', line 77, column 94 to line 88, column 1)",
                                                      " (in 'string', line 90, column 1 to column 13)",
                                                      " (in 'string', line 91, column 8 to column 9)",
                                                      " (in 'string', line 91, column 1 to column 16)",
                                                      " (in 'string', line 93, column 2 to column 59)",
                                                      " (in 'string', line 92, column 1 to line 93, column 59)",
                                                      " (in 'string', line 94, column 1 to column 21)",
                                                      " (in 'string', line 95, column 0 to column 15)",
                                                      " (in 'string', line 89, column 84 to line 96, column 1)",
                                                      " (in 'string', line 103, column 8 to column 15)",
                                                      " (in 'string', line 103, column 1 to column 25)",
                                                      " (in 'string', line 104, column 1 to column 13)",
                                                      " (in 'string', line 105, column 1 to column 11)",
                                                      " (in 'string', line 106, column 1 to column 14)",
                                                      " (in 'string', line 107, column 1 to column 8)",
                                                      " (in 'string', line 108, column 13 to column 20)",
                                                      " (in 'string', line 108, column 1 to column 52)",
                                                      " (in 'string', line 109, column 8 to column 15)",
                                                      " (in 'string', line 109, column 1 to column 44)",
                                                      " (in 'string', line 110, column 8 to column 15)",
                                                      " (in 'string', line 110, column 1 to column 57)",
                                                      " (in 'string', line 137, column 2 to column 16)",
                                                      " (in 'string', line 138, column 2 to column 16)",
                                                      " (in 'string', line 139, column 9 to column 16)",
                                                      " (in 'string', line 139, column 2 to column 33)",
                                                      " (in 'string', line 140, column 9 to column 16)",
                                                      " (in 'string', line 140, column 2 to column 21)",
                                                      " (in 'string', line 141, column 9 to column 16)",
                                                      " (in 'string', line 141, column 2 to column 20)",
                                                      " (in 'string', line 142, column 9 to column 16)",
                                                      " (in 'string', line 142, column 2 to column 20)",
                                                      " (in 'string', line 143, column 9 to column 16)",
                                                      " (in 'string', line 143, column 2 to column 25)",
                                                      " (in 'string', line 144, column 9 to column 16)",
                                                      " (in 'string', line 144, column 2 to column 31)",
                                                      " (in 'string', line 150, column 3 to column 66)",
                                                      " (in 'string', line 151, column 3 to column 22)",
                                                      " (in 'string', line 152, column 3 to column 55)",
                                                      " (in 'string', line 149, column 28 to line 153, column 3)",
                                                      " (in 'string', line 149, column 9 to line 153, column 3)",
                                                      " (in 'string', line 146, column 3 to column 68)",
                                                      " (in 'string', line 147, column 3 to column 36)",
                                                      " (in 'string', line 148, column 3 to column 32)",
                                                      " (in 'string', line 145, column 20 to line 149, column 3)",
                                                      " (in 'string', line 145, column 2 to line 153, column 3)",
                                                      " (in 'string', line 154, column 2 to column 27)",
                                                      " (in 'string', line 155, column 2 to column 47)",
                                                      " (in 'string', line 157, column 3 to column 23)",
                                                      " (in 'string', line 156, column 2 to line 157, column 23)",
                                                      " (in 'string', line 159, column 3 to column 22)",
                                                      " (in 'string', line 160, column 3 to column 50)",
                                                      " (in 'string', line 183, column 4 to column 11)",
                                                      " (in 'string', line 182, column 10 to line 183, column 11)",
                                                      " (in 'string', line 163, column 5 to column 12)",
                                                      " (in 'string', line 162, column 4 to line 163, column 12)",
                                                      " (in 'string', line 164, column 4 to column 39)",
                                                      " (in 'string', line 165, column 4 to column 21)",
                                                      " (in 'string', line 166, column 4 to column 39)",
                                                      " (in 'string', line 168, column 5 to column 49)",
                                                      " (in 'string', line 169, column 5 to column 52)",
                                                      " (in 'string', line 174, column 6 to column 28)",
                                                      " (in 'string', line 173, column 10 to line 174, column 28)",
                                                      " (in 'string', line 172, column 6 to column 28)",
                                                      " (in 'string', line 171, column 5 to line 174, column 28)",
                                                      " (in 'string', line 175, column 5 to column 40)",
                                                      " (in 'string', line 176, column 58 to column 64)",
                                                      " (in 'string', line 176, column 5 to column 64)",
                                                      " (in 'string', line 167, column 25 to line 177, column 5)",
                                                      " (in 'string', line 167, column 4 to line 177, column 5)",
                                                      " (in 'string', line 180, column 5 to column 56)",
                                                      " (in 'string', line 179, column 4 to line 180, column 56)",
                                                      " (in 'string', line 181, column 4 to column 13)",
                                                      " (in 'string', line 161, column 37 to line 182, column 4)",
                                                      " (in 'string', line 161, column 3 to line 183, column 11)",
                                                      " (in 'string', line 158, column 19 to line 184, column 3)",
                                                      " (in 'string', line 158, column 2 to line 184, column 3)",
                                                      " (in 'string', line 136, column 27 to line 185, column 2)",
                                                      " (in 'string', line 136, column 8 to line 185, column 2)",
                                                      " (in 'string', line 112, column 9 to column 16)",
                                                      " (in 'string', line 112, column 2 to column 86)",
                                                      " (in 'string', line 113, column 9 to column 16)",
                                                      " (in 'string', line 113, column 2 to column 43)",
                                                      " (in 'string', line 114, column 9 to column 16)",
                                                      " (in 'string', line 114, column 2 to column 42)",
                                                      " (in 'string', line 115, column 9 to column 16)",
                                                      " (in 'string', line 115, column 2 to column 53)",
                                                      " (in 'string', line 116, column 2 to column 26)",
                                                      " (in 'string', line 117, column 9 to column 16)",
                                                      " (in 'string', line 117, column 2 to column 20)",
                                                      " (in 'string', line 119, column 3 to column 52)",
                                                      " (in 'string', line 118, column 2 to line 119, column 52)",
                                                      " (in 'string', line 122, column 3 to column 52)",
                                                      " (in 'string', line 123, column 3 to column 33)",
                                                      " (in 'string', line 124, column 3 to column 54)",
                                                      " (in 'string', line 134, column 4 to column 11)",
                                                      " (in 'string', line 133, column 10 to line 134, column 11)",
                                                      " (in 'string', line 131, column 5 to column 66)",
                                                      " (in 'string', line 130, column 4 to line 131, column 66)",
                                                      " (in 'string', line 132, column 4 to column 13)",
                                                      " (in 'string', line 128, column 58 to line 133, column 4)",
                                                      " (in 'string', line 128, column 3 to line 134, column 11)",
                                                      " (in 'string', line 120, column 19 to line 135, column 4)",
                                                      " (in 'string', line 120, column 2 to line 135, column 4)",
                                                      " (in 'string', line 111, column 20 to line 136, column 2)",
                                                      " (in 'string', line 111, column 1 to line 185, column 2)",
                                                      " (in 'string', line 187, column 1 to column 22)",
                                                      " (in 'string', line 188, column 0 to column 16)",
                                                      " (in 'string', line 102, column 73 to line 189, column 1)",
                                                      " (in 'string', line 197, column 1 to column 13)",
                                                      " (in 'string', line 198, column 1 to column 15)",
                                                      " (in 'string', line 199, column 8 to column 13)",
                                                      " (in 'string', line 199, column 1 to column 22)",
                                                      " (in 'string', line 203, column 2 to column 77)",
                                                      " (in 'string', line 201, column 2 to column 56)",
                                                      " (in 'string', line 200, column 1 to line 203, column 77)",
                                                      " (in 'string', line 210, column 3 to line 211, column 54)",
                                                      " (in 'string', line 209, column 2 to line 211, column 54)",
                                                      " (in 'string', line 208, column 8 to line 212, column 2)",
                                                      " (in 'string', line 207, column 2 to column 67)",
                                                      " (in 'string', line 206, column 27 to line 208, column 2)",
                                                      " (in 'string', line 206, column 8 to line 212, column 2)",
                                                      " (in 'string', line 205, column 2 to column 68)",
                                                      " (in 'string', line 204, column 38 to line 206, column 2)",
                                                      " (in 'string', line 204, column 1 to line 212, column 2)",
                                                      " (in 'string', line 213, column 1 to column 33)",
                                                      " (in 'string', line 214, column 0 to column 15)",
                                                      " (in 'string', line 196, column 31 to line 215, column 1)",
                                                      " (in 'string', line 222, column 1 to column 13)",
                                                      " (in 'string', line 223, column 8 to column 9)",
                                                      " (in 'string', line 223, column 1 to column 35)",
                                                      " (in 'string', line 224, column 1 to column 70)",
                                                      " (in 'string', line 230, column 5 to column 74)",
                                                      " (in 'string', line 229, column 9 to line 230, column 74)",
                                                      " (in 'string', line 228, column 4 to column 65)",
                                                      " (in 'string', line 227, column 3 to line 230, column 74)",
                                                      " (in 'string', line 226, column 16 to line 231, column 3)",
                                                      " (in 'string', line 226, column 2 to line 231, column 3)",
                                                      " (in 'string', line 225, column 11 to line 232, column 2)",
                                                      " (in 'string', line 225, column 1 to line 232, column 2)",
                                                      " (in 'string', line 233, column 1 to column 21)",
                                                      " (in 'string', line 234, column 0 to column 15)",
                                                      " (in 'string', line 221, column 65 to line 235, column 1)",
                                                      " (in 'string', line 238, column 1 to column 13)",
                                                      " (in 'string', line 239, column 8 to column 9)",
                                                      " (in 'string', line 239, column 1 to column 35)",
                                                      " (in 'string', line 240, column 1 to column 76)",
                                                      " (in 'string', line 243, column 3 to column 43)",
                                                      " (in 'string', line 242, column 2 to line 243, column 43)",
                                                      " (in 'string', line 241, column 11 to line 244, column 2)",
                                                      " (in 'string', line 241, column 1 to line 244, column 2)",
                                                      " (in 'string', line 245, column 1 to column 21)",
                                                      " (in 'string', line 246, column 0 to column 15)",
                                                      " (in 'string', line 236, column 77 to line 247, column 1)",
                                                      " (in 'string', line 255, column 8 to column 15)",
                                                      " (in 'string', line 255, column 1 to column 25)",
                                                      " (in 'string', line 256, column 1 to column 11)",
                                                      " (in 'string', line 257, column 1 to column 14)",
                                                      " (in 'string', line 258, column 1 to column 14)",
                                                      " (in 'string', line 259, column 1 to column 15)",
                                                      " (in 'string', line 260, column 13 to column 20)",
                                                      " (in 'string', line 260, column 1 to column 52)",
                                                      " (in 'string', line 261, column 8 to column 15)",
                                                      " (in 'string', line 261, column 1 to column 44)",
                                                      " (in 'string', line 262, column 8 to column 15)",
                                                      " (in 'string', line 262, column 1 to column 57)",
                                                      " (in 'string', line 301, column 2 to column 16)",
                                                      " (in 'string', line 302, column 2 to column 16)",
                                                      " (in 'string', line 303, column 9 to column 16)",
                                                      " (in 'string', line 303, column 2 to column 33)",
                                                      " (in 'string', line 304, column 9 to column 16)",
                                                      " (in 'string', line 304, column 2 to column 26)",
                                                      " (in 'string', line 305, column 9 to column 16)",
                                                      " (in 'string', line 305, column 2 to column 21)",
                                                      " (in 'string', line 306, column 9 to column 16)",
                                                      " (in 'string', line 306, column 2 to column 28)",
                                                      " (in 'string', line 307, column 9 to column 16)",
                                                      " (in 'string', line 307, column 2 to column 20)",
                                                      " (in 'string', line 308, column 9 to column 16)",
                                                      " (in 'string', line 308, column 2 to column 26)",
                                                      " (in 'string', line 309, column 9 to column 16)",
                                                      " (in 'string', line 309, column 2 to column 24)",
                                                      " (in 'string', line 310, column 9 to column 16)",
                                                      " (in 'string', line 310, column 2 to column 27)",
                                                      " (in 'string', line 311, column 9 to column 16)",
                                                      " (in 'string', line 311, column 2 to column 25)",
                                                      " (in 'string', line 312, column 2 to column 15)",
                                                      " (in 'string', line 325, column 3 to column 22)",
                                                      " (in 'string', line 326, column 3 to column 13)",
                                                      " (in 'string', line 327, column 3 to column 66)",
                                                      " (in 'string', line 328, column 3 to column 28)",
                                                      " (in 'string', line 329, column 3 to column 55)",
                                                      " (in 'string', line 330, column 3 to column 49)",
                                                      " (in 'string', line 324, column 28 to line 331, column 3)",
                                                      " (in 'string', line 324, column 9 to line 331, column 3)",
                                                      " (in 'string', line 314, column 3 to column 68)",
                                                      " (in 'string', line 315, column 3 to column 28)",
                                                      " (in 'string', line 316, column 3 to column 32)",
                                                      " (in 'string', line 317, column 3 to column 35)",
                                                      " (in 'string', line 318, column 3 to column 27)",
                                                      " (in 'string', line 319, column 3 to column 24)",
                                                      " (in 'string', line 320, column 3 to column 29)",
                                                      " (in 'string', line 321, column 3 to column 36)",
                                                      " (in 'string', line 323, column 4 to column 44)",
                                                      " (in 'string', line 322, column 3 to line 323, column 44)",
                                                      " (in 'string', line 313, column 20 to line 324, column 3)",
                                                      " (in 'string', line 313, column 2 to line 331, column 3)",
                                                      " (in 'string', line 333, column 3 to column 23)",
                                                      " (in 'string', line 338, column 4 to column 64)",
                                                      " (in 'string', line 337, column 8 to line 338, column 64)",
                                                      " (in 'string', line 336, column 4 to column 108)",
                                                      " (in 'string', line 335, column 3 to line 338, column 64)",
                                                      " (in 'string', line 364, column 4 to column 11)",
                                                      " (in 'string', line 363, column 10 to line 364, column 11)",
                                                      " (in 'string', line 341, column 5 to column 12)",
                                                      " (in 'string', line 340, column 4 to line 341, column 12)",
                                                      " (in 'string', line 342, column 4 to column 45)",
                                                      " (in 'string', line 343, column 4 to column 21)",
                                                      " (in 'string', line 344, column 4 to column 40)",
                                                      " (in 'string', line 346, column 5 to column 49)",
                                                      " (in 'string', line 350, column 6 to column 66)",
                                                      " (in 'string', line 349, column 10 to line 350, column 66)",
                                                      " (in 'string', line 348, column 6 to column 110)",
                                                      " (in 'string', line 347, column 5 to line 350, column 66)",
                                                      " (in 'string', line 355, column 6 to column 28)",
                                                      " (in 'string', line 354, column 10 to line 355, column 28)",
                                                      " (in 'string', line 353, column 6 to column 28)",
                                                      " (in 'string', line 352, column 5 to line 355, column 28)",
                                                      " (in 'string', line 356, column 5 to column 41)",
                                                      " (in 'string', line 357, column 76 to column 82)",
                                                      " (in 'string', line 357, column 5 to column 82)",
                                                      " (in 'string', line 345, column 25 to line 358, column 5)",
                                                      " (in 'string', line 345, column 4 to line 358, column 5)",
                                                      " (in 'string', line 361, column 4 to column 68)",
                                                      " (in 'string', line 360, column 3 to line 361, column 68)",
                                                      " (in 'string', line 362, column 3 to column 12)",
                                                      " (in 'string', line 339, column 42 to line 363, column 4)",
                                                      " (in 'string', line 339, column 3 to line 364, column 11)",
                                                      " (in 'string', line 332, column 19 to line 365, column 3)",
                                                      " (in 'string', line 332, column 2 to line 365, column 3)",
                                                      " (in 'string', line 300, column 27 to line 366, column 2)",
                                                      " (in 'string', line 300, column 8 to line 366, column 2)",
                                                      " (in 'string', line 264, column 9 to column 16)",
                                                      " (in 'string', line 264, column 2 to column 86)",
                                                      " (in 'string', line 265, column 2 to column 26)",
                                                      " (in 'string', line 266, column 9 to column 16)",
                                                      " (in 'string', line 266, column 2 to column 43)",
                                                      " (in 'string', line 267, column 9 to column 16)",
                                                      " (in 'string', line 267, column 2 to column 42)",
                                                      " (in 'string', line 268, column 9 to column 16)",
                                                      " (in 'string', line 268, column 2 to column 57)",
                                                      " (in 'string', line 269, column 9 to column 16)",
                                                      " (in 'string', line 269, column 2 to column 20)",
                                                      " (in 'string', line 276, column 3 to column 24)",
                                                      " (in 'string', line 275, column 28 to line 277, column 3)",
                                                      " (in 'string', line 275, column 9 to line 277, column 3)",
                                                      " (in 'string', line 271, column 10 to column 17)",
                                                      " (in 'string', line 271, column 3 to column 21)",
                                                      " (in 'string', line 273, column 4 to column 48)",
                                                      " (in 'string', line 272, column 3 to line 273, column 48)",
                                                      " (in 'string', line 274, column 3 to column 18)",
                                                      " (in 'string', line 270, column 21 to line 275, column 3)",
                                                      " (in 'string', line 270, column 2 to line 277, column 3)",
                                                      " (in 'string', line 285, column 4 to column 41)",
                                                      " (in 'string', line 286, column 4 to column 38)",
                                                      " (in 'string', line 287, column 4 to column 48)",
                                                      " (in 'string', line 284, column 29 to line 288, column 4)",
                                                      " (in 'string', line 284, column 10 to line 288, column 4)",
                                                      " (in 'string', line 281, column 4 to column 66)",
                                                      " (in 'string', line 282, column 4 to column 34)",
                                                      " (in 'string', line 283, column 4 to column 68)",
                                                      " (in 'string', line 280, column 22 to line 284, column 4)",
                                                      " (in 'string', line 280, column 3 to line 288, column 4)",
                                                      " (in 'string', line 298, column 4 to column 11)",
                                                      " (in 'string', line 297, column 10 to line 298, column 11)",
                                                      " (in 'string', line 295, column 5 to column 67)",
                                                      " (in 'string', line 294, column 4 to line 295, column 67)",
                                                      " (in 'string', line 296, column 4 to column 13)",
                                                      " (in 'string', line 292, column 59 to line 297, column 4)",
                                                      " (in 'string', line 292, column 3 to line 298, column 11)",
                                                      " (in 'string', line 278, column 19 to line 299, column 3)",
                                                      " (in 'string', line 278, column 2 to line 299, column 3)",
                                                      " (in 'string', line 263, column 20 to line 300, column 2)",
                                                      " (in 'string', line 263, column 1 to line 366, column 2)",
                                                      " (in 'string', line 368, column 1 to column 22)",
                                                      " (in 'string', line 369, column 0 to column 16)",
                                                      " (in 'string', line 254, column 70 to line 370, column 1)",
                                                      " (in 'string', line 390, column 1 to column 35)",
                                                      " (in 'string', line 391, column 1 to column 38)",
                                                      " (in 'string', line 392, column 1 to column 34)",
                                                      " (in 'string', line 393, column 8 to column 13)",
                                                      " (in 'string', line 393, column 15 to column 20)",
                                                      " (in 'string', line 393, column 1 to column 26)",
                                                      " (in 'string', line 394, column 1 to column 55)",
                                                      " (in 'string', line 396, column 9 to column 14)",
                                                      " (in 'string', line 396, column 2 to column 39)",
                                                      " (in 'string', line 397, column 9 to column 18)",
                                                      " (in 'string', line 397, column 2 to column 24)",
                                                      " (in 'string', line 398, column 9 to column 14)",
                                                      " (in 'string', line 398, column 16 to column 21)",
                                                      " (in 'string', line 398, column 2 to column 36)",
                                                      " (in 'string', line 399, column 9 to column 18)",
                                                      " (in 'string', line 399, column 2 to column 60)",
                                                      " (in 'string', line 400, column 9 to column 18)",
                                                      " (in 'string', line 400, column 2 to column 45)",
                                                      " (in 'string', line 401, column 2 to column 31)",
                                                      " (in 'string', line 402, column 26 to column 31)",
                                                      " (in 'string', line 402, column 9 to column 18)",
                                                      " (in 'string', line 402, column 2 to column 33)",
                                                      " (in 'string', line 403, column 9 to column 14)",
                                                      " (in 'string', line 403, column 2 to column 27)",
                                                      " (in 'string', line 404, column 9 to column 14)",
                                                      " (in 'string', line 404, column 2 to column 21)",
                                                      " (in 'string', line 406, column 3 to column 34)",
                                                      " (in 'string', line 405, column 2 to line 406, column 34)",
                                                      " (in 'string', line 410, column 3 to column 38)",
                                                      " (in 'string', line 409, column 7 to line 410, column 38)",
                                                      " (in 'string', line 408, column 3 to column 34)",
                                                      " (in 'string', line 407, column 2 to line 410, column 38)",
                                                      " (in 'string', line 411, column 2 to line 413, column 55)",
                                                      " (in 'string', line 416, column 10 to column 19)",
                                                      " (in 'string', line 416, column 3 to column 29)",
                                                      " (in 'string', line 417, column 10 to column 19)",
                                                      " (in 'string', line 417, column 3 to column 30)",
                                                      " (in 'string', line 418, column 10 to column 19)",
                                                      " (in 'string', line 418, column 3 to column 72)",
                                                      " (in 'string', line 419, column 3 to column 33)",
                                                      " (in 'string', line 421, column 4 to column 40)",
                                                      " (in 'string', line 420, column 3 to line 421, column 40)",
                                                      " (in 'string', line 425, column 4 to line 426, column 54)",
                                                      " (in 'string', line 424, column 10 to line 426, column 54)",
                                                      " (in 'string', line 423, column 4 to column 45)",
                                                      " (in 'string', line 422, column 23 to line 424, column 4)",
                                                      " (in 'string', line 422, column 3 to line 426, column 54)",
                                                      " (in 'string', line 427, column 3 to line 429, column 27)",
                                                      " (in 'string', line 415, column 22 to line 430, column 3)",
                                                      " (in 'string', line 415, column 2 to line 430, column 3)",
                                                      " (in 'string', line 432, column 10 to column 19)",
                                                      " (in 'string', line 432, column 3 to column 62)",
                                                      " (in 'string', line 433, column 10 to column 15)",
                                                      " (in 'string', line 433, column 3 to column 23)",
                                                      " (in 'string', line 434, column 10 to column 15)",
                                                      " (in 'string', line 434, column 3 to column 25)",
                                                      " (in 'string', line 438, column 4 to column 18)",
                                                      " (in 'string', line 436, column 4 to column 34)",
                                                      " (in 'string', line 435, column 3 to line 438, column 18)",
                                                      " (in 'string', line 440, column 11 to column 20)",
                                                      " (in 'string', line 440, column 4 to column 30)",
                                                      " (in 'string', line 441, column 11 to column 20)",
                                                      " (in 'string', line 441, column 4 to column 83)",
                                                      " (in 'string', line 443, column 5 to column 41)",
                                                      " (in 'string', line 442, column 4 to line 443, column 41)",
                                                      " (in 'string', line 444, column 4 to line 445, column 54)",
                                                      " (in 'string', line 446, column 4 to column 47)",
                                                      " (in 'string', line 439, column 23 to line 447, column 4)",
                                                      " (in 'string', line 439, column 3 to line 447, column 4)",
                                                      " (in 'string', line 448, column 3 to column 38)",
                                                      " (in 'string', line 431, column 25 to line 449, column 3)",
                                                      " (in 'string', line 431, column 2 to line 449, column 3)",
                                                      " (in 'string', line 450, column 1 to column 24)",
                                                      " (in 'string', line 395, column 21 to line 451, column 2)",
                                                      " (in 'string', line 395, column 1 to line 451, column 2)",
                                                      " (in 'string', line 452, column 0 to column 12)",
                                                      " (in 'string', line 389, column 81 to line 453, column 1)",
                                                      " (in 'string', line 459, column 1 to column 35)",
                                                      " (in 'string', line 460, column 1 to column 38)",
                                                      " (in 'string', line 461, column 1 to column 34)",
                                                      " (in 'string', line 462, column 36 to column 41)",
                                                      " (in 'string', line 462, column 8 to column 13)",
                                                      " (in 'string', line 462, column 15 to column 22)",
                                                      " (in 'string', line 462, column 1 to column 43)",
                                                      " (in 'string', line 463, column 1 to column 55)",
                                                      " (in 'string', line 465, column 9 to column 14)",
                                                      " (in 'string', line 465, column 2 to column 39)",
                                                      " (in 'string', line 466, column 9 to column 18)",
                                                      " (in 'string', line 466, column 2 to column 24)",
                                                      " (in 'string', line 467, column 9 to column 14)",
                                                      " (in 'string', line 467, column 16 to column 21)",
                                                      " (in 'string', line 467, column 2 to column 36)",
                                                      " (in 'string', line 468, column 9 to column 18)",
                                                      " (in 'string', line 468, column 2 to column 60)",
                                                      " (in 'string', line 469, column 9 to column 18)",
                                                      " (in 'string', line 469, column 2 to column 45)",
                                                      " (in 'string', line 470, column 2 to column 31)",
                                                      " (in 'string', line 471, column 26 to column 31)",
                                                      " (in 'string', line 471, column 9 to column 18)",
                                                      " (in 'string', line 471, column 2 to column 33)",
                                                      " (in 'string', line 472, column 9 to column 14)",
                                                      " (in 'string', line 472, column 16 to column 25)",
                                                      " (in 'string', line 472, column 2 to column 40)",
                                                      " (in 'string', line 473, column 9 to column 14)",
                                                      " (in 'string', line 473, column 2 to column 21)",
                                                      " (in 'string', line 475, column 3 to column 34)",
                                                      " (in 'string', line 474, column 2 to line 475, column 34)",
                                                      " (in 'string', line 479, column 3 to column 38)",
                                                      " (in 'string', line 478, column 7 to line 479, column 38)",
                                                      " (in 'string', line 477, column 3 to column 34)",
                                                      " (in 'string', line 476, column 2 to line 479, column 38)",
                                                      " (in 'string', line 480, column 2 to line 482, column 55)",
                                                      " (in 'string', line 485, column 10 to column 19)",
                                                      " (in 'string', line 485, column 3 to column 34)",
                                                      " (in 'string', line 486, column 10 to column 19)",
                                                      " (in 'string', line 486, column 3 to column 30)",
                                                      " (in 'string', line 487, column 10 to column 19)",
                                                      " (in 'string', line 487, column 3 to column 72)",
                                                      " (in 'string', line 488, column 3 to column 33)",
                                                      " (in 'string', line 490, column 4 to column 40)",
                                                      " (in 'string', line 489, column 3 to line 490, column 40)",
                                                      " (in 'string', line 494, column 4 to line 495, column 54)",
                                                      " (in 'string', line 493, column 10 to line 495, column 54)",
                                                      " (in 'string', line 492, column 4 to column 49)",
                                                      " (in 'string', line 491, column 23 to line 493, column 4)",
                                                      " (in 'string', line 491, column 3 to line 495, column 54)",
                                                      " (in 'string', line 496, column 3 to line 498, column 27)",
                                                      " (in 'string', line 484, column 22 to line 499, column 3)",
                                                      " (in 'string', line 484, column 2 to line 499, column 3)",
                                                      " (in 'string', line 501, column 10 to column 19)",
                                                      " (in 'string', line 501, column 3 to column 62)",
                                                      " (in 'string', line 502, column 10 to column 15)",
                                                      " (in 'string', line 502, column 3 to column 23)",
                                                      " (in 'string', line 503, column 10 to column 19)",
                                                      " (in 'string', line 503, column 3 to column 58)",
                                                      " (in 'string', line 507, column 4 to column 18)",
                                                      " (in 'string', line 505, column 4 to column 34)",
                                                      " (in 'string', line 504, column 3 to line 507, column 18)",
                                                      " (in 'string', line 509, column 11 to column 20)",
                                                      " (in 'string', line 509, column 4 to column 83)",
                                                      " (in 'string', line 511, column 5 to column 41)",
                                                      " (in 'string', line 510, column 4 to line 511, column 41)",
                                                      " (in 'string', line 512, column 4 to line 513, column 59)",
                                                      " (in 'string', line 508, column 23 to line 514, column 4)",
                                                      " (in 'string', line 508, column 3 to line 514, column 4)",
                                                      " (in 'string', line 515, column 2 to column 36)",
                                                      " (in 'string', line 500, column 25 to line 516, column 3)",
                                                      " (in 'string', line 500, column 2 to line 516, column 3)",
                                                      " (in 'string', line 517, column 1 to column 33)",
                                                      " (in 'string', line 464, column 21 to line 518, column 2)",
                                                      " (in 'string', line 464, column 1 to line 518, column 2)",
                                                      " (in 'string', line 519, column 0 to column 20)",
                                                      " (in 'string', line 458, column 81 to line 520, column 1)",
                                                      " (in 'string', line 527, column 1 to column 37)",
                                                      " (in 'string', line 528, column 8 to column 17)",
                                                      " (in 'string', line 528, column 1 to column 54)",
                                                      " (in 'string', line 529, column 8 to column 17)",
                                                      " (in 'string', line 529, column 1 to column 50)",
                                                      " (in 'string', line 530, column 8 to column 17)",
                                                      " (in 'string', line 530, column 1 to column 23)",
                                                      " (in 'string', line 531, column 25 to column 30)",
                                                      " (in 'string', line 531, column 8 to column 17)",
                                                      " (in 'string', line 531, column 1 to column 32)",
                                                      " (in 'string', line 535, column 2 to column 29)",
                                                      " (in 'string', line 534, column 6 to line 535, column 29)",
                                                      " (in 'string', line 533, column 2 to column 33)",
                                                      " (in 'string', line 532, column 1 to line 535, column 29)",
                                                      " (in 'string', line 538, column 3 to column 57)",
                                                      " (in 'string', line 537, column 2 to line 538, column 57)",
                                                      " (in 'string', line 536, column 1 to line 538, column 57)",
                                                      " (in 'string', line 541, column 9 to column 18)",
                                                      " (in 'string', line 541, column 2 to column 79)",
                                                      " (in 'string', line 543, column 3 to column 39)",
                                                      " (in 'string', line 542, column 2 to line 543, column 39)",
                                                      " (in 'string', line 544, column 2 to line 545, column 57)",
                                                      " (in 'string', line 540, column 21 to line 546, column 2)",
                                                      " (in 'string', line 540, column 1 to line 546, column 2)",
                                                      " (in 'string', line 547, column 0 to column 16)",
                                                      " (in 'string', line 526, column 69 to line 548, column 1)"};
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
Shuffle_rng(const T0__& inv_temp_arg__, const int& nerrs, RNG& base_rng__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& inv_temp = to_ref(inv_temp_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 1;
    validate_non_negative_index("out", "nerrs", nerrs);
    Eigen::Matrix<local_scalar_t__, -1, 1> out;
    out = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 3;
    validate_non_negative_index("temp1", "nerrs", nerrs);
    Eigen::Matrix<local_scalar_t__, -1, 1> temp1;
    temp1 = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
    stan::math::fill(temp1, DUMMY_VAR__);
    
    current_statement__ = 4;
    assign(temp1, nil_index_list(),
      to_vector(uniform_rng(rep_vector(0, nerrs), 1, base_rng__)),
      "assigning variable temp1");
    current_statement__ = 5;
    assign(out, nil_index_list(),
      rvalue(inv_temp,
        cons_list(index_multi(sort_indices_asc(temp1)), nil_index_list()),
        "inv_temp"), "assigning variable out");
    current_statement__ = 6;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct Shuffle_rng_functor__ {
template <typename T0__, typename RNG>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>>, -1, 1>
operator()(const T0__& inv_temp, const int& nerrs, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return Shuffle_rng(inv_temp, nerrs, base_rng__, pstream__);
}
};
template <typename RNG>
Eigen::Matrix<double, -1, 1>
DrawMlhs_rng(const int& nerrs, const int& draw_mlhs, RNG& base_rng__,
             std::ostream* pstream__) {
  using local_scalar_t__ = double;
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 8;
    validate_non_negative_index("error", "nerrs", nerrs);
    Eigen::Matrix<local_scalar_t__, -1, 1> error;
    error = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
    stan::math::fill(error, DUMMY_VAR__);
    
    current_statement__ = 10;
    validate_non_negative_index("temp0", "nerrs", nerrs);
    Eigen::Matrix<local_scalar_t__, -1, 1> temp0;
    temp0 = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
    stan::math::fill(temp0, DUMMY_VAR__);
    
    current_statement__ = 11;
    assign(temp0, nil_index_list(), rep_vector(0, nerrs),
      "assigning variable temp0");
    current_statement__ = 24;
    if (logical_eq(draw_mlhs, 0)) {
      current_statement__ = 22;
      assign(error, nil_index_list(),
        to_vector(uniform_rng(temp0, 1, base_rng__)),
        "assigning variable error");
    } else {
      current_statement__ = 21;
      if (logical_eq(draw_mlhs, 1)) {
        current_statement__ = 12;
        validate_non_negative_index("temp1", "nerrs", nerrs);
        std::vector<int> temp1;
        temp1 = std::vector<int>(nerrs, std::numeric_limits<int>::min());
        
        current_statement__ = 14;
        validate_non_negative_index("temp", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__, -1, 1> temp;
        temp = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
        stan::math::fill(temp, DUMMY_VAR__);
        
        current_statement__ = 17;
        for (int err = 1; err <= nerrs; ++err) {
          current_statement__ = 16;
          assign(temp1, cons_list(index_uni(err), nil_index_list()),
            (err - 1), "assigning variable temp1");}
        current_statement__ = 18;
        assign(temp, nil_index_list(), divide(to_vector(temp1), nerrs),
          "assigning variable temp");
        current_statement__ = 19;
        assign(error, nil_index_list(),
          Shuffle_rng(
            add(temp,
              divide(to_vector(uniform_rng(temp0, 1, base_rng__)), nerrs)),
            nerrs, base_rng__, pstream__), "assigning variable error");
      } 
    }
    current_statement__ = 25;
    return error;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct DrawMlhs_rng_functor__ {
template <typename RNG>
Eigen::Matrix<double, -1, 1>
operator()(const int& nerrs, const int& draw_mlhs, RNG& base_rng__,
           std::ostream* pstream__)  const 
{
return DrawMlhs_rng(nerrs, draw_mlhs, base_rng__, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename RNG>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
T7__>>, -1, 1>>
DrawError_rng(const T0__& quant_num, const T1__& quant_j_arg__,
              const T2__& price_j_arg__, const T3__& psi_j_arg__,
              const T4__& phi_j_arg__, const T5__& gamma_j_arg__,
              const T6__& alpha_arg__, const T7__& scale,
              const int& model_num, const int& nalts, const int& nerrs,
              const int& cond_error, const int& draw_mlhs, RNG& base_rng__,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          stan::value_type_t<T6__>,
          T7__>>;
  const auto& quant_j = to_ref(quant_j_arg__);
  const auto& price_j = to_ref(price_j_arg__);
  const auto& psi_j = to_ref(psi_j_arg__);
  const auto& phi_j = to_ref(phi_j_arg__);
  const auto& gamma_j = to_ref(gamma_j_arg__);
  const auto& alpha = to_ref(alpha_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 27;
    validate_non_negative_index("out", "nerrs", nerrs);
    current_statement__ = 28;
    validate_non_negative_index("out", "nalts + 1", (nalts + 1));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> out;
    out = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(nerrs, Eigen::Matrix<local_scalar_t__, -1, 1>(
      (nalts + 1)));
    stan::math::fill(out, DUMMY_VAR__);
    
    current_statement__ = 30;
    validate_non_negative_index("error", "nerrs", nerrs);
    current_statement__ = 31;
    validate_non_negative_index("error", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, -1> error;
    error = Eigen::Matrix<local_scalar_t__, -1, -1>(nerrs, (nalts + 1));
    stan::math::fill(error, DUMMY_VAR__);
    
    current_statement__ = 52;
    if (logical_eq(cond_error, 0)) {
      current_statement__ = 50;
      for (int j = 1; j <= (nalts + 1); ++j) {
        current_statement__ = 49;
        assign(error,
          cons_list(index_omni(), cons_list(index_uni(j), nil_index_list())),
          multiply(
            minus(
              stan::math::log(
                minus(
                  stan::math::log(
                    DrawMlhs_rng(nerrs, draw_mlhs, base_rng__, pstream__))))),
            scale), "assigning variable error");}
    } else {
      current_statement__ = 48;
      if (logical_eq(cond_error, 1)) {
        current_statement__ = 33;
        validate_non_negative_index("cond_demand", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> cond_demand;
        cond_demand = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(cond_demand, DUMMY_VAR__);
        
        current_statement__ = 34;
        assign(cond_demand, nil_index_list(), append_row(quant_num, quant_j),
          "assigning variable cond_demand");
        current_statement__ = 35;
        validate_non_negative_index("ek", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> ek;
        ek = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(ek, DUMMY_VAR__);
        
        current_statement__ = 37;
        validate_non_negative_index("vk", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, -1, 1> vk;
        vk = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
        stan::math::fill(vk, DUMMY_VAR__);
        
        local_scalar_t__ v1;
        v1 = DUMMY_VAR__;
        
        current_statement__ = 39;
        v1 = ((alpha[(1 - 1)] - 1) * stan::math::log(quant_num));
        current_statement__ = 43;
        if (logical_neq(model_num, 5)) {
          current_statement__ = 42;
          assign(vk, nil_index_list(),
            subtract(
              add(psi_j,
                elt_multiply(
                  subtract(
                    rvalue(alpha,
                      cons_list(index_min_max(2, (nalts + 1)),
                        nil_index_list()), "alpha"), 1),
                  stan::math::log(add(elt_divide(quant_j, gamma_j), 1)))),
              stan::math::log(price_j)), "assigning variable vk");
        } else {
          current_statement__ = 41;
          if (logical_eq(model_num, 5)) {
            current_statement__ = 40;
            assign(vk, nil_index_list(),
              subtract(
                add(
                  subtract(psi_j,
                    stan::math::log(
                      add(elt_multiply(phi_j, quant_j), gamma_j))),
                  stan::math::log(phi_j)), stan::math::log(price_j)),
              "assigning variable vk");
          } 
        }
        current_statement__ = 44;
        assign(ek, nil_index_list(),
          append_row(0, divide(subtract(v1, vk), scale)),
          "assigning variable ek");
        current_statement__ = 46;
        for (int j = 1; j <= (nalts + 1); ++j) {
          current_statement__ = 45;
          assign(error,
            cons_list(index_omni(),
              cons_list(index_uni(j), nil_index_list())),
            (logical_gt(cond_demand[(j - 1)], 0) ?
               stan::math::eval(rep_vector((ek[(j - 1)] * scale), nerrs)) :
               stan::math::eval(multiply(
                                  minus(
                                    stan::math::log(
                                      minus(
                                        stan::math::log(
                                          multiply(
                                            DrawMlhs_rng(nerrs,
                                              draw_mlhs, base_rng__, pstream__),
                                            stan::math::exp(
                                              -stan::math::exp(-ek[(j - 1)]))))))),
                                  scale))), "assigning variable error");}
      } 
    }
    current_statement__ = 54;
    for (int err = 1; err <= nerrs; ++err) {
      current_statement__ = 53;
      assign(out, cons_list(index_uni(err), nil_index_list()),
        transpose(
          rvalue(error, cons_list(index_uni(err), nil_index_list()), "error")),
        "assigning variable out");}
    current_statement__ = 55;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct DrawError_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename RNG>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>,
T7__>>, -1, 1>>
operator()(const T0__& quant_num, const T1__& quant_j, const T2__& price_j,
           const T3__& psi_j, const T4__& phi_j, const T5__& gamma_j,
           const T6__& alpha, const T7__& scale, const int& model_num,
           const int& nalts, const int& nerrs, const int& cond_error,
           const int& draw_mlhs, RNG& base_rng__, std::ostream* pstream__)  const 
{
return DrawError_rng(quant_num, quant_j, price_j, psi_j, phi_j, gamma_j,
         alpha, scale, model_num, nalts, nerrs, cond_error, draw_mlhs,
         base_rng__, pstream__);
}
};
template <typename T0__>
std::vector<int>
CalcAltOrder(const T0__& MUzero_arg__, const int& nalts,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>>;
  const auto& MUzero = to_ref(MUzero_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 57;
    validate_non_negative_index("order_x", "nalts + 1", (nalts + 1));
    std::vector<int> order_x;
    order_x = std::vector<int>((nalts + 1), std::numeric_limits<int>::min());
    
    current_statement__ = 59;
    validate_non_negative_index("ord_alts", "nalts", nalts);
    Eigen::Matrix<local_scalar_t__, -1, 1> ord_alts;
    ord_alts = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
    stan::math::fill(ord_alts, DUMMY_VAR__);
    
    current_statement__ = 61;
    validate_non_negative_index("order_MU", "nalts", nalts);
    std::vector<int> order_MU;
    order_MU = std::vector<int>(nalts, std::numeric_limits<int>::min());
    
    current_statement__ = 62;
    assign(order_MU, nil_index_list(),
      sort_indices_desc(
        rvalue(MUzero,
          cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
          "MUzero")), "assigning variable order_MU");
    current_statement__ = 64;
    for (int j = 1; j <= nalts; ++j) {
      current_statement__ = 63;
      assign(ord_alts, cons_list(index_uni(j), nil_index_list()), j,
        "assigning variable ord_alts");}
    current_statement__ = 65;
    assign(order_x, nil_index_list(),
      sort_indices_asc(
        append_row(1.0,
          to_vector(
            add(
              rvalue(ord_alts,
                cons_list(index_multi(order_MU), nil_index_list()),
                "ord_alts"), 1)))), "assigning variable order_x");
    current_statement__ = 66;
    return order_x;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct CalcAltOrder_functor__ {
template <typename T0__>
std::vector<int>
operator()(const T0__& MUzero, const int& nalts, std::ostream* pstream__)  const 
{
return CalcAltOrder(MUzero, nalts, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
SortParmMatrix(const T0__& MUzero_arg__, const T1__& price_arg__,
               const T2__& gamma_arg__, const T3__& alpha_phi_arg__,
               const int& nalts, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::value_type_t<T0__>,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>>;
  const auto& MUzero = to_ref(MUzero_arg__);
  const auto& price = to_ref(price_arg__);
  const auto& gamma = to_ref(gamma_arg__);
  const auto& alpha_phi = to_ref(alpha_phi_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 68;
    validate_non_negative_index("parm_matrix", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, -1> parm_matrix;
    parm_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>((nalts + 1), 4);
    stan::math::fill(parm_matrix, DUMMY_VAR__);
    
    current_statement__ = 70;
    validate_non_negative_index("MU_j", "nalts", nalts);
    Eigen::Matrix<local_scalar_t__, -1, 1> MU_j;
    MU_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
    stan::math::fill(MU_j, DUMMY_VAR__);
    
    current_statement__ = 71;
    assign(MU_j, nil_index_list(),
      rvalue(MUzero,
        cons_list(index_min_max(2, (nalts + 1)), nil_index_list()), "MUzero"),
      "assigning variable MU_j");
    current_statement__ = 72;
    validate_non_negative_index("price_j", "nalts", nalts);
    Eigen::Matrix<local_scalar_t__, -1, 1> price_j;
    price_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
    stan::math::fill(price_j, DUMMY_VAR__);
    
    current_statement__ = 73;
    assign(price_j, nil_index_list(),
      rvalue(price,
        cons_list(index_min_max(2, (nalts + 1)), nil_index_list()), "price"),
      "assigning variable price_j");
    current_statement__ = 74;
    validate_non_negative_index("gamma_j", "nalts", nalts);
    Eigen::Matrix<local_scalar_t__, -1, 1> gamma_j;
    gamma_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
    stan::math::fill(gamma_j, DUMMY_VAR__);
    
    current_statement__ = 75;
    assign(gamma_j, nil_index_list(),
      rvalue(gamma,
        cons_list(index_min_max(2, (nalts + 1)), nil_index_list()), "gamma"),
      "assigning variable gamma_j");
    current_statement__ = 76;
    validate_non_negative_index("alpha_phi_j", "nalts", nalts);
    Eigen::Matrix<local_scalar_t__, -1, 1> alpha_phi_j;
    alpha_phi_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
    stan::math::fill(alpha_phi_j, DUMMY_VAR__);
    
    current_statement__ = 77;
    assign(alpha_phi_j, nil_index_list(),
      rvalue(alpha_phi,
        cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
        "alpha_phi"), "assigning variable alpha_phi_j");
    current_statement__ = 78;
    validate_non_negative_index("order_MU", "nalts", nalts);
    std::vector<int> order_MU;
    order_MU = std::vector<int>(nalts, std::numeric_limits<int>::min());
    
    current_statement__ = 79;
    assign(order_MU, nil_index_list(), sort_indices_desc(MU_j),
      "assigning variable order_MU");
    current_statement__ = 80;
    assign(parm_matrix, nil_index_list(),
      append_col(
        append_row(MUzero[(1 - 1)],
          rvalue(MU_j, cons_list(index_multi(order_MU), nil_index_list()),
            "MU_j")),
        append_col(
          append_row(price[(1 - 1)],
            rvalue(price_j,
              cons_list(index_multi(order_MU), nil_index_list()), "price_j")),
          append_col(
            append_row(gamma[(1 - 1)],
              rvalue(gamma_j,
                cons_list(index_multi(order_MU), nil_index_list()),
                "gamma_j")),
            append_row(alpha_phi[(1 - 1)],
              rvalue(alpha_phi_j,
                cons_list(index_multi(order_MU), nil_index_list()),
                "alpha_phi_j"))))), "assigning variable parm_matrix");
    current_statement__ = 81;
    return parm_matrix;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct SortParmMatrix_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
stan::value_type_t<T2__>,
stan::value_type_t<T3__>>, -1, -1>
operator()(const T0__& MUzero, const T1__& price, const T2__& gamma,
           const T3__& alpha_phi, const int& nalts, std::ostream* pstream__)  const 
{
return SortParmMatrix(MUzero, price, gamma, alpha_phi, nalts, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__>
stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, stan::value_type_t<T4__>,
stan::value_type_t<T5__>>
ComputeE(const int& M, const T1__& lambda, const T2__& g_price__phi_arg__,
         const T3__& b_arg__, const T4__& c_arg__, const T5__& d_arg__,
         std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>>;
  const auto& g_price__phi = to_ref(g_price__phi_arg__);
  const auto& b = to_ref(b_arg__);
  const auto& c = to_ref(c_arg__);
  const auto& d = to_ref(d_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ output;
    output = DUMMY_VAR__;
    
    current_statement__ = 84;
    validate_non_negative_index("temp", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> temp;
    temp = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(temp, DUMMY_VAR__);
    
    current_statement__ = 87;
    for (int m = 1; m <= M; ++m) {
      current_statement__ = 86;
      assign(temp, cons_list(index_uni(m), nil_index_list()),
        (g_price__phi[(m - 1)] *
          ((pow(lambda, b[(m - 1)]) / c[(m - 1)]) - d[(m - 1)])),
        "assigning variable temp");}
    current_statement__ = 88;
    output = sum(temp);
    current_statement__ = 89;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ComputeE_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__>
stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, stan::value_type_t<T4__>,
stan::value_type_t<T5__>>
operator()(const int& M, const T1__& lambda, const T2__& g_price__phi,
           const T3__& b, const T4__& c, const T5__& d,
           std::ostream* pstream__)  const 
{
return ComputeE(M, lambda, g_price__phi, b, c, d, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T9__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
T9__>>, -1, 1>
MarshallianDemand(const T0__& income, const T1__& price_arg__,
                  const T2__& MUzero_arg__, const T3__& phi_arg__,
                  const T4__& gamma_arg__, const T5__& alpha_arg__,
                  const int& nalts, const int& algo_gen,
                  const int& model_num, const T9__& tol_e,
                  const int& max_loop, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          T9__>>;
  const auto& price = to_ref(price_arg__);
  const auto& MUzero = to_ref(MUzero_arg__);
  const auto& phi = to_ref(phi_arg__);
  const auto& gamma = to_ref(gamma_arg__);
  const auto& alpha = to_ref(alpha_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 91;
    validate_non_negative_index("mdemand", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> mdemand;
    mdemand = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(mdemand, DUMMY_VAR__);
    
    local_scalar_t__ lambda;
    lambda = DUMMY_VAR__;
    
    int M;
    M = std::numeric_limits<int>::min();
    
    current_statement__ = 94;
    M = 1;
    int exit;
    exit = std::numeric_limits<int>::min();
    
    current_statement__ = 95;
    exit = 0;
    local_scalar_t__ E;
    E = DUMMY_VAR__;
    
    current_statement__ = 97;
    validate_non_negative_index("order_x", "nalts + 1", (nalts + 1));
    std::vector<int> order_x;
    order_x = std::vector<int>((nalts + 1), std::numeric_limits<int>::min());
    
    current_statement__ = 98;
    assign(order_x, nil_index_list(), CalcAltOrder(MUzero, nalts, pstream__),
      "assigning variable order_x");
    current_statement__ = 99;
    validate_non_negative_index("X", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> X;
    X = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(X, DUMMY_VAR__);
    
    current_statement__ = 100;
    assign(X, nil_index_list(), rep_vector(0, (nalts + 1)),
      "assigning variable X");
    current_statement__ = 101;
    validate_non_negative_index("d", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> d;
    d = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(d, DUMMY_VAR__);
    
    current_statement__ = 102;
    assign(d, nil_index_list(), append_row(0, rep_vector(1, nalts)),
      "assigning variable d");
    current_statement__ = 186;
    if (logical_eq(algo_gen, 0)) {
      current_statement__ = 160;
      validate_non_negative_index("parm_matrix", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, -1> parm_matrix;
      parm_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>((nalts + 1), 4);
      stan::math::fill(parm_matrix, DUMMY_VAR__);
      
      current_statement__ = 161;
      assign(parm_matrix, nil_index_list(),
        SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__),
        "assigning variable parm_matrix");
      current_statement__ = 162;
      validate_non_negative_index("mu", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 163;
      assign(mu, nil_index_list(), col(parm_matrix, 1),
        "assigning variable mu");
      current_statement__ = 164;
      validate_non_negative_index("g", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> g;
      g = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(g, DUMMY_VAR__);
      
      current_statement__ = 165;
      assign(g, nil_index_list(), col(parm_matrix, 3), "assigning variable g");
      current_statement__ = 166;
      validate_non_negative_index("g_price", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> g_price;
      g_price = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(g_price, DUMMY_VAR__);
      
      current_statement__ = 167;
      assign(g_price, nil_index_list(), elt_multiply(g, col(parm_matrix, 2)),
        "assigning variable g_price");
      local_scalar_t__ alpha_1;
      alpha_1 = DUMMY_VAR__;
      
      current_statement__ = 168;
      alpha_1 = alpha[(1 - 1)];
      current_statement__ = 169;
      validate_non_negative_index("b", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> b;
      b = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(b, DUMMY_VAR__);
      
      current_statement__ = 172;
      for (int j = 1; j <= (nalts + 1); ++j) {
        current_statement__ = 171;
        assign(b, cons_list(index_uni(j), nil_index_list()),
          (g_price[(j - 1)] * pow(mu[(j - 1)], inv((1 - alpha_1)))),
          "assigning variable b");}
      current_statement__ = 184;
      while (logical_eq(exit, 0)) {
        local_scalar_t__ lambda_num;
        lambda_num = DUMMY_VAR__;
        
        current_statement__ = 173;
        lambda_num = ((income +
                        sum(
                          rvalue(g_price,
                            cons_list(index_min_max(1, M), nil_index_list()),
                            "g_price"))) - 1);
        local_scalar_t__ lambda_den;
        lambda_den = DUMMY_VAR__;
        
        current_statement__ = 174;
        lambda_den = sum(
                       rvalue(b,
                         cons_list(index_min_max(1, M), nil_index_list()),
                         "b"));
        current_statement__ = 175;
        lambda = pow((lambda_num / lambda_den), (alpha_1 - 1));
        current_statement__ = 182;
        if ((primitive_value(
            logical_gt(lambda, mu[(std::min((M + 1), (nalts + 1)) - 1)])) ||
            primitive_value(logical_eq(M, (nalts + 1))))) {
          current_statement__ = 179;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 178;
            assign(X, cons_list(index_uni(m), nil_index_list()),
              ((pow((lambda / mu[(m - 1)]), inv((alpha_1 - 1))) - d[(m - 1)])
                * g[(m - 1)]), "assigning variable X");}
          current_statement__ = 180;
          exit = 1;
        } else {
          current_statement__ = 177;
          if (logical_lt(M, (nalts + 1))) {
            current_statement__ = 176;
            M = (M + 1);
          } 
        }
      }
    } else {
      current_statement__ = 159;
      if (logical_eq(algo_gen, 1)) {
        local_scalar_t__ lambda_l;
        lambda_l = DUMMY_VAR__;
        
        local_scalar_t__ lambda_u;
        lambda_u = DUMMY_VAR__;
        
        current_statement__ = 105;
        validate_non_negative_index("parm_matrix", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> parm_matrix;
        parm_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>((nalts + 1), 4);
        stan::math::fill(parm_matrix, DUMMY_VAR__);
        
        current_statement__ = 107;
        validate_non_negative_index("mu", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 109;
        validate_non_negative_index("c", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> c;
        c = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(c, DUMMY_VAR__);
        
        current_statement__ = 111;
        validate_non_negative_index("b", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> b;
        b = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(b, DUMMY_VAR__);
        
        current_statement__ = 113;
        validate_non_negative_index("g__phi", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> g__phi;
        g__phi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(g__phi, DUMMY_VAR__);
        
        current_statement__ = 115;
        validate_non_negative_index("g_price__phi", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> g_price__phi;
        g_price__phi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(g_price__phi, DUMMY_VAR__);
        
        current_statement__ = 126;
        if (logical_lt(model_num, 5)) {
          current_statement__ = 122;
          assign(parm_matrix, nil_index_list(),
            SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__),
            "assigning variable parm_matrix");
          current_statement__ = 123;
          assign(b, nil_index_list(), inv(subtract(col(parm_matrix, 4), 1)),
            "assigning variable b");
          current_statement__ = 124;
          assign(g__phi, nil_index_list(), col(parm_matrix, 3),
            "assigning variable g__phi");
        } else {
          current_statement__ = 121;
          if (logical_eq(model_num, 5)) {
            current_statement__ = 117;
            assign(parm_matrix, nil_index_list(),
              SortParmMatrix(MUzero, price, gamma, phi, nalts, pstream__),
              "assigning variable parm_matrix");
            current_statement__ = 118;
            assign(b, nil_index_list(), inv(subtract(alpha, 1)),
              "assigning variable b");
            current_statement__ = 119;
            assign(g__phi, nil_index_list(),
              elt_divide(col(parm_matrix, 3), col(parm_matrix, 4)),
              "assigning variable g__phi");
          } 
        }
        current_statement__ = 127;
        assign(mu, nil_index_list(), col(parm_matrix, 1),
          "assigning variable mu");
        current_statement__ = 128;
        assign(g_price__phi, nil_index_list(),
          elt_multiply(g__phi, col(parm_matrix, 2)),
          "assigning variable g_price__phi");
        current_statement__ = 130;
        for (int j = 1; j <= (nalts + 1); ++j) {
          current_statement__ = 129;
          assign(c, cons_list(index_uni(j), nil_index_list()),
            pow(mu[(j - 1)], b[(j - 1)]), "assigning variable c");}
        current_statement__ = 157;
        while (logical_eq(exit, 0)) {
          current_statement__ = 131;
          lambda = mu[((M + 1) - 1)];
          current_statement__ = 132;
          E = ComputeE(M, lambda, g_price__phi, b, c, d, pstream__);
          current_statement__ = 155;
          if ((primitive_value(logical_gte(E, income)) || primitive_value(
              logical_eq((M + 1), (nalts + 1))))) {
            current_statement__ = 136;
            if (logical_lt(E, income)) {
              current_statement__ = 135;
              M = (M + 1);
            } 
            current_statement__ = 137;
            lambda_l = (logical_lt(E, income) ?
                          stan::math::promote_scalar<local_scalar_t__>(0) :
                          stan::math::promote_scalar<local_scalar_t__>(lambda));
            current_statement__ = 138;
            lambda_u = mu[(M - 1)];
            current_statement__ = 139;
            lambda = ((lambda_l + lambda_u) / 2);
            current_statement__ = 150;
            for (int n = 1; n <= max_loop; ++n) {
              local_scalar_t__ lambda_mid;
              lambda_mid = DUMMY_VAR__;
              
              current_statement__ = 140;
              lambda_mid = ((lambda_l + lambda_u) / 2);
              current_statement__ = 141;
              E = ComputeE(M, lambda, g_price__phi, b, c, d, pstream__);
              current_statement__ = 145;
              if (logical_lt(E, income)) {
                current_statement__ = 144;
                lambda_u = lambda_mid;
              } else {
                current_statement__ = 143;
                if (logical_gt(E, income)) {
                  current_statement__ = 142;
                  lambda_l = lambda_mid;
                } 
              }
              current_statement__ = 146;
              lambda = ((lambda_l + lambda_u) / 2);
              current_statement__ = 148;
              if (logical_lt(
                    stan::math::fabs((((E - income) / (E + income)) * 0.5)),
                    tol_e)) {
                break;
              } }
            current_statement__ = 152;
            for (int m = 1; m <= M; ++m) {
              current_statement__ = 151;
              assign(X, cons_list(index_uni(m), nil_index_list()),
                ((pow((lambda / mu[(m - 1)]), b[(m - 1)]) - d[(m - 1)]) *
                  g__phi[(m - 1)]), "assigning variable X");}
            current_statement__ = 153;
            exit = 1;
          } else {
            current_statement__ = 134;
            if ((primitive_value(logical_lt(E, income)) && primitive_value(
                logical_lt((M + 1), (nalts + 1))))) {
              current_statement__ = 133;
              M = (M + 1);
            } 
          }
        }
      } 
    }
    current_statement__ = 187;
    assign(mdemand, nil_index_list(),
      rvalue(X, cons_list(index_multi(order_x), nil_index_list()), "X"),
      "assigning variable mdemand");
    current_statement__ = 188;
    return mdemand;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct MarshallianDemand_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T9__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
T9__>>, -1, 1>
operator()(const T0__& income, const T1__& price, const T2__& MUzero,
           const T3__& phi, const T4__& gamma, const T5__& alpha,
           const int& nalts, const int& algo_gen, const int& model_num,
           const T9__& tol_e, const int& max_loop, std::ostream* pstream__)  const 
{
return MarshallianDemand(income, price, MUzero, phi, gamma, alpha, nalts,
         algo_gen, model_num, tol_e, max_loop, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>>>
ComputeUtilJ(const T0__& income, const T1__& quant_j_arg__,
             const T2__& price_j_arg__, const T3__& psi_arg__,
             const T4__& phi_j_arg__, const T5__& gamma_j_arg__,
             const T6__& alpha_arg__, const int& nalts, const int& model_num,
             std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          stan::value_type_t<T6__>>>;
  const auto& quant_j = to_ref(quant_j_arg__);
  const auto& price_j = to_ref(price_j_arg__);
  const auto& psi = to_ref(psi_arg__);
  const auto& phi_j = to_ref(phi_j_arg__);
  const auto& gamma_j = to_ref(gamma_j_arg__);
  const auto& alpha = to_ref(alpha_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ output;
    output = DUMMY_VAR__;
    
    local_scalar_t__ util_num;
    util_num = DUMMY_VAR__;
    
    current_statement__ = 192;
    validate_non_negative_index("util_j", "nalts", nalts);
    Eigen::Matrix<local_scalar_t__, -1, 1> util_j;
    util_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
    stan::math::fill(util_j, DUMMY_VAR__);
    
    current_statement__ = 196;
    if (logical_eq(model_num, 4)) {
      current_statement__ = 195;
      util_num = (psi[(1 - 1)] *
                   stan::math::log(
                     (income - multiply(transpose(price_j), quant_j))));
    } else {
      current_statement__ = 194;
      util_num = ((psi[(1 - 1)] *
                    pow((income - multiply(transpose(price_j), quant_j)),
                      alpha[(1 - 1)])) / alpha[(1 - 1)]);
    }
    current_statement__ = 205;
    if ((primitive_value(logical_eq(model_num, 1)) || primitive_value(
        logical_eq(model_num, 4)))) {
      current_statement__ = 203;
      assign(util_j, nil_index_list(),
        elt_multiply(
          elt_multiply(
            rvalue(psi,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "psi"), gamma_j),
          stan::math::log(add(elt_divide(quant_j, gamma_j), 1))),
        "assigning variable util_j");
    } else {
      current_statement__ = 202;
      if (logical_eq(model_num, 5)) {
        current_statement__ = 200;
        assign(util_j, nil_index_list(),
          elt_multiply(
            rvalue(psi,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "psi"),
            stan::math::log(
              add(elt_divide(elt_multiply(phi_j, quant_j), gamma_j), 1))),
          "assigning variable util_j");
      } else {
        current_statement__ = 198;
        for (int n = 1; n <= nalts; ++n) {
          current_statement__ = 197;
          assign(util_j, cons_list(index_uni(n), nil_index_list()),
            (((psi[((n + 1) - 1)] * gamma_j[(n - 1)]) / alpha[((n + 1) - 1)])
              *
              (pow(((quant_j[(n - 1)] / gamma_j[(n - 1)]) + 1),
                 alpha[((n + 1) - 1)]) - 1)), "assigning variable util_j");}
      }
    }
    current_statement__ = 206;
    output = (util_num + sum(util_j));
    current_statement__ = 207;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ComputeUtilJ_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__>
stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
stan::value_type_t<T6__>>>
operator()(const T0__& income, const T1__& quant_j, const T2__& price_j,
           const T3__& psi, const T4__& phi_j, const T5__& gamma_j,
           const T6__& alpha, const int& nalts, const int& model_num,
           std::ostream* pstream__)  const 
{
return ComputeUtilJ(income, quant_j, price_j, psi, phi_j, gamma_j, alpha,
         nalts, model_num, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__, typename T6__, typename T7__, typename T8__>
stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::promote_args_t<stan::value_type_t<T6__>,
stan::value_type_t<T7__>,
stan::value_type_t<T8__>>>
ComputeUtilM(const int& M, const T1__& lambda1, const T2__& g_psi_a_arg__,
             const T3__& a_a_1_arg__, const T4__& mu_a_a_1_arg__,
             const T5__& psi_arg__, const T6__& g_arg__,
             const T7__& price_arg__, const T8__& d_arg__,
             const int& model_num, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>,
          stan::value_type_t<T5__>, stan::promote_args_t<stan::value_type_t<T6__>,
          stan::value_type_t<T7__>,
          stan::value_type_t<T8__>>>;
  const auto& g_psi_a = to_ref(g_psi_a_arg__);
  const auto& a_a_1 = to_ref(a_a_1_arg__);
  const auto& mu_a_a_1 = to_ref(mu_a_a_1_arg__);
  const auto& psi = to_ref(psi_arg__);
  const auto& g = to_ref(g_arg__);
  const auto& price = to_ref(price_arg__);
  const auto& d = to_ref(d_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ output;
    output = DUMMY_VAR__;
    
    current_statement__ = 210;
    validate_non_negative_index("temp", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> temp;
    temp = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(temp, DUMMY_VAR__);
    
    current_statement__ = 211;
    assign(temp, nil_index_list(), rep_vector(0, M),
      "assigning variable temp");
    current_statement__ = 212;
    assign(temp, cons_list(index_uni(1), nil_index_list()),
      (g_psi_a[(1 - 1)] *
        ((pow(lambda1, a_a_1[(1 - 1)]) * mu_a_a_1[(1 - 1)]) - d[(1 - 1)])),
      "assigning variable temp");
    current_statement__ = 220;
    if (logical_gt(M, 1)) {
      current_statement__ = 218;
      for (int m = 2; m <= M; ++m) {
        current_statement__ = 216;
        if (logical_eq(model_num, 1)) {
          current_statement__ = 215;
          assign(temp, cons_list(index_uni(m), nil_index_list()),
            ((psi[(m - 1)] * g[(m - 1)]) *
              stan::math::log((psi[(m - 1)] / (lambda1 * price[(m - 1)])))),
            "assigning variable temp");
        } else {
          current_statement__ = 214;
          if (logical_neq(model_num, 1)) {
            current_statement__ = 213;
            assign(temp, cons_list(index_uni(m), nil_index_list()),
              (g_psi_a[(m - 1)] *
                ((pow(lambda1, a_a_1[(m - 1)]) * mu_a_a_1[(m - 1)]) -
                  d[(m - 1)])), "assigning variable temp");
          } 
        }}
    } 
    current_statement__ = 221;
    output = sum(temp);
    current_statement__ = 222;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ComputeUtilM_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__,
typename T5__, typename T6__, typename T7__, typename T8__>
stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>, stan::value_type_t<T4__>,
stan::value_type_t<T5__>, stan::promote_args_t<stan::value_type_t<T6__>,
stan::value_type_t<T7__>,
stan::value_type_t<T8__>>>
operator()(const int& M, const T1__& lambda1, const T2__& g_psi_a,
           const T3__& a_a_1, const T4__& mu_a_a_1, const T5__& psi,
           const T6__& g, const T7__& price, const T8__& d,
           const int& model_num, std::ostream* pstream__)  const 
{
return ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1, psi, g, price, d,
         model_num, pstream__);
}
};
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
T4__>
ComputeKtUtilM(const int& M, const T1__& lambda1, const T2__& psi_arg__,
               const T3__& mu_arg__, const T4__& alpha_1,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T1__,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          T4__>;
  const auto& psi = to_ref(psi_arg__);
  const auto& mu = to_ref(mu_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    local_scalar_t__ output;
    output = DUMMY_VAR__;
    
    current_statement__ = 225;
    validate_non_negative_index("temp", "M", M);
    Eigen::Matrix<local_scalar_t__, -1, 1> temp;
    temp = Eigen::Matrix<local_scalar_t__, -1, 1>(M);
    stan::math::fill(temp, DUMMY_VAR__);
    
    current_statement__ = 226;
    assign(temp, nil_index_list(), rep_vector(0, M),
      "assigning variable temp");
    current_statement__ = 227;
    assign(temp, cons_list(index_uni(1), nil_index_list()),
      ((psi[(1 - 1)] *
         pow((lambda1 / mu[(1 - 1)]), (alpha_1 / (alpha_1 - 1)))) / alpha_1),
      "assigning variable temp");
    current_statement__ = 231;
    if (logical_gt(M, 1)) {
      current_statement__ = 229;
      for (int m = 2; m <= M; ++m) {
        current_statement__ = 228;
        assign(temp, cons_list(index_uni(m), nil_index_list()),
          (psi[(m - 1)] * stan::math::log((mu[(m - 1)] / lambda1))),
          "assigning variable temp");}
    } 
    current_statement__ = 232;
    output = sum(temp);
    current_statement__ = 233;
    return output;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct ComputeKtUtilM_functor__ {
template <typename T1__, typename T2__, typename T3__, typename T4__>
stan::promote_args_t<T1__, stan::value_type_t<T2__>,
stan::value_type_t<T3__>,
T4__>
operator()(const int& M, const T1__& lambda1, const T2__& psi,
           const T3__& mu, const T4__& alpha_1, std::ostream* pstream__)  const 
{
return ComputeKtUtilM(M, lambda1, psi, mu, alpha_1, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T9__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
T9__>>, -1, 1>
HicksianDemand(const T0__& util, const T1__& price_arg__,
               const T2__& MUzero_arg__, const T3__& phi_arg__,
               const T4__& gamma_arg__, const T5__& alpha_arg__,
               const int& nalts, const int& algo_gen, const int& model_num,
               const T9__& tol_l, const int& max_loop,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          T9__>>;
  const auto& price = to_ref(price_arg__);
  const auto& MUzero = to_ref(MUzero_arg__);
  const auto& phi = to_ref(phi_arg__);
  const auto& gamma = to_ref(gamma_arg__);
  const auto& alpha = to_ref(alpha_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    current_statement__ = 235;
    validate_non_negative_index("hdemand", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> hdemand;
    hdemand = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(hdemand, DUMMY_VAR__);
    
    int M;
    M = std::numeric_limits<int>::min();
    
    current_statement__ = 237;
    M = 1;
    int exit;
    exit = std::numeric_limits<int>::min();
    
    current_statement__ = 238;
    exit = 0;
    local_scalar_t__ lambda1;
    lambda1 = DUMMY_VAR__;
    
    local_scalar_t__ util_new;
    util_new = DUMMY_VAR__;
    
    current_statement__ = 241;
    validate_non_negative_index("order_x", "nalts + 1", (nalts + 1));
    std::vector<int> order_x;
    order_x = std::vector<int>((nalts + 1), std::numeric_limits<int>::min());
    
    current_statement__ = 242;
    assign(order_x, nil_index_list(), CalcAltOrder(MUzero, nalts, pstream__),
      "assigning variable order_x");
    current_statement__ = 243;
    validate_non_negative_index("X", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> X;
    X = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(X, DUMMY_VAR__);
    
    current_statement__ = 244;
    assign(X, nil_index_list(), rep_vector(0, (nalts + 1)),
      "assigning variable X");
    current_statement__ = 245;
    validate_non_negative_index("d", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> d;
    d = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(d, DUMMY_VAR__);
    
    current_statement__ = 246;
    assign(d, nil_index_list(), append_row(0, rep_vector(1, nalts)),
      "assigning variable d");
    current_statement__ = 364;
    if (logical_eq(algo_gen, 0)) {
      current_statement__ = 323;
      validate_non_negative_index("parm_matrix", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, -1> parm_matrix;
      parm_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>((nalts + 1), 4);
      stan::math::fill(parm_matrix, DUMMY_VAR__);
      
      current_statement__ = 324;
      assign(parm_matrix, nil_index_list(),
        SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__),
        "assigning variable parm_matrix");
      local_scalar_t__ alpha_1;
      alpha_1 = DUMMY_VAR__;
      
      current_statement__ = 325;
      alpha_1 = alpha[(1 - 1)];
      current_statement__ = 326;
      validate_non_negative_index("mu", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> mu;
      mu = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(mu, DUMMY_VAR__);
      
      current_statement__ = 327;
      assign(mu, nil_index_list(), col(parm_matrix, 1),
        "assigning variable mu");
      current_statement__ = 328;
      validate_non_negative_index("g", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> g;
      g = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(g, DUMMY_VAR__);
      
      current_statement__ = 329;
      assign(g, nil_index_list(), col(parm_matrix, 3), "assigning variable g");
      current_statement__ = 330;
      validate_non_negative_index("g_psi", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> g_psi;
      g_psi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(g_psi, DUMMY_VAR__);
      
      current_statement__ = 331;
      assign(g_psi, nil_index_list(),
        elt_multiply(elt_multiply(g, mu), col(parm_matrix, 2)),
        "assigning variable g_psi");
      current_statement__ = 332;
      validate_non_negative_index("c", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> c;
      c = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(c, DUMMY_VAR__);
      
      current_statement__ = 343;
      if (logical_eq(model_num, 3)) {
        current_statement__ = 337;
        validate_non_negative_index("b", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> b;
        b = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(b, DUMMY_VAR__);
        
        current_statement__ = 340;
        for (int j = 1; j <= (nalts + 1); ++j) {
          current_statement__ = 339;
          assign(b, cons_list(index_uni(j), nil_index_list()),
            pow(mu[(j - 1)], (-alpha_1 / (alpha_1 - 1))),
            "assigning variable b");}
        current_statement__ = 341;
        assign(c, nil_index_list(), elt_multiply(g_psi, b),
          "assigning variable c");
      } else {
        current_statement__ = 336;
        if (logical_eq(model_num, 4)) {
          current_statement__ = 334;
          assign(c, nil_index_list(),
            elt_multiply(g_psi, stan::math::log(mu)), "assigning variable c");
        } 
      }
      current_statement__ = 362;
      while (logical_eq(exit, 0)) {
        current_statement__ = 353;
        if (logical_eq(model_num, 3)) {
          local_scalar_t__ lambda_num;
          lambda_num = DUMMY_VAR__;
          
          current_statement__ = 349;
          lambda_num = (((alpha_1 * util) +
                          sum(
                            rvalue(g_psi,
                              cons_list(index_min_max(1, M),
                                nil_index_list()), "g_psi"))) -
                         g_psi[(1 - 1)]);
          local_scalar_t__ lambda_den;
          lambda_den = DUMMY_VAR__;
          
          current_statement__ = 350;
          lambda_den = sum(
                         rvalue(c,
                           cons_list(index_min_max(1, M), nil_index_list()),
                           "c"));
          current_statement__ = 351;
          lambda1 = pow((lambda_num / lambda_den), ((alpha_1 - 1) / alpha_1));
        } else {
          current_statement__ = 348;
          if (logical_eq(model_num, 4)) {
            local_scalar_t__ lambda_num;
            lambda_num = DUMMY_VAR__;
            
            current_statement__ = 344;
            lambda_num = (util -
                           sum(
                             rvalue(c,
                               cons_list(index_min_max(1, M),
                                 nil_index_list()), "c")));
            local_scalar_t__ lambda_den;
            lambda_den = DUMMY_VAR__;
            
            current_statement__ = 345;
            lambda_den = sum(
                           rvalue(g_psi,
                             cons_list(index_min_max(1, M), nil_index_list()),
                             "g_psi"));
            current_statement__ = 346;
            lambda1 = inv(stan::math::exp((lambda_num / lambda_den)));
          } 
        }
        current_statement__ = 360;
        if ((primitive_value(
            logical_gt(lambda1, mu[(std::min((M + 1), (nalts + 1)) - 1)])) ||
            primitive_value(logical_eq(M, (nalts + 1))))) {
          current_statement__ = 357;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 356;
            assign(X, cons_list(index_uni(m), nil_index_list()),
              ((pow((lambda1 / mu[(m - 1)]), inv((alpha_1 - 1))) -
                 d[(m - 1)]) * g[(m - 1)]), "assigning variable X");}
          current_statement__ = 358;
          exit = 1;
        } else {
          current_statement__ = 355;
          if (logical_lt(M, (nalts + 1))) {
            current_statement__ = 354;
            M = (M + 1);
          } 
        }
      }
    } else {
      current_statement__ = 322;
      if (logical_eq(algo_gen, 1)) {
        local_scalar_t__ lambda_l;
        lambda_l = DUMMY_VAR__;
        
        local_scalar_t__ lambda_u;
        lambda_u = DUMMY_VAR__;
        
        current_statement__ = 249;
        validate_non_negative_index("parm_matrix", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, -1> parm_matrix;
        parm_matrix = Eigen::Matrix<local_scalar_t__, -1, -1>((nalts + 1), 4);
        stan::math::fill(parm_matrix, DUMMY_VAR__);
        
        current_statement__ = 251;
        validate_non_negative_index("psi_ord", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> psi_ord;
        psi_ord = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(psi_ord, DUMMY_VAR__);
        
        current_statement__ = 253;
        validate_non_negative_index("mu", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 255;
        validate_non_negative_index("price_ord", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> price_ord;
        price_ord = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(price_ord, DUMMY_VAR__);
        
        current_statement__ = 257;
        validate_non_negative_index("a", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> a;
        a = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(a, DUMMY_VAR__);
        
        current_statement__ = 259;
        validate_non_negative_index("g_psi_a", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> g_psi_a;
        g_psi_a = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(g_psi_a, DUMMY_VAR__);
        
        current_statement__ = 261;
        validate_non_negative_index("a_a_1", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> a_a_1;
        a_a_1 = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(a_a_1, DUMMY_VAR__);
        
        current_statement__ = 263;
        validate_non_negative_index("mu_a_a_1", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mu_a_a_1;
        mu_a_a_1 = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(mu_a_a_1, DUMMY_VAR__);
        
        current_statement__ = 265;
        validate_non_negative_index("g__phi", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> g__phi;
        g__phi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(g__phi, DUMMY_VAR__);
        
        local_scalar_t__ alpha_1;
        alpha_1 = DUMMY_VAR__;
        
        current_statement__ = 287;
        if (logical_lt(model_num, 5)) {
          current_statement__ = 276;
          assign(parm_matrix, nil_index_list(),
            SortParmMatrix(MUzero, price, gamma, alpha, nalts, pstream__),
            "assigning variable parm_matrix");
          current_statement__ = 277;
          assign(mu, nil_index_list(), col(parm_matrix, 1),
            "assigning variable mu");
          current_statement__ = 278;
          assign(g__phi, nil_index_list(), col(parm_matrix, 3),
            "assigning variable g__phi");
          current_statement__ = 279;
          assign(price_ord, nil_index_list(), col(parm_matrix, 2),
            "assigning variable price_ord");
          current_statement__ = 280;
          assign(a, nil_index_list(), col(parm_matrix, 4),
            "assigning variable a");
          current_statement__ = 281;
          assign(a_a_1, nil_index_list(), elt_divide(a, subtract(a, 1)),
            "assigning variable a_a_1");
          current_statement__ = 282;
          assign(psi_ord, nil_index_list(), elt_multiply(mu, price_ord),
            "assigning variable psi_ord");
          current_statement__ = 283;
          assign(g_psi_a, nil_index_list(),
            elt_divide(elt_multiply(g__phi, psi_ord), a),
            "assigning variable g_psi_a");
          current_statement__ = 285;
          for (int j = 1; j <= (nalts + 1); ++j) {
            current_statement__ = 284;
            assign(mu_a_a_1, cons_list(index_uni(j), nil_index_list()),
              pow(inv(mu[(j - 1)]), a_a_1[(j - 1)]),
              "assigning variable mu_a_a_1");}
        } else {
          current_statement__ = 275;
          if (logical_eq(model_num, 5)) {
            current_statement__ = 268;
            alpha_1 = alpha[(1 - 1)];
            current_statement__ = 269;
            assign(a, nil_index_list(), alpha, "assigning variable a");
            current_statement__ = 270;
            assign(parm_matrix, nil_index_list(),
              SortParmMatrix(MUzero, price, gamma, phi, nalts, pstream__),
              "assigning variable parm_matrix");
            current_statement__ = 271;
            assign(mu, nil_index_list(), col(parm_matrix, 1),
              "assigning variable mu");
            current_statement__ = 272;
            assign(g__phi, nil_index_list(),
              elt_divide(col(parm_matrix, 3), col(parm_matrix, 4)),
              "assigning variable g__phi");
            current_statement__ = 273;
            assign(psi_ord, nil_index_list(),
              elt_multiply(elt_multiply(mu, col(parm_matrix, 2)), g__phi),
              "assigning variable psi_ord");
          } 
        }
        current_statement__ = 320;
        while (logical_eq(exit, 0)) {
          current_statement__ = 288;
          lambda1 = mu[((M + 1) - 1)];
          current_statement__ = 292;
          if (logical_lt(model_num, 5)) {
            current_statement__ = 291;
            util_new = ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1,
                         psi_ord, g__phi, price_ord, d, model_num, pstream__);
          } else {
            current_statement__ = 290;
            if (logical_eq(model_num, 5)) {
              current_statement__ = 289;
              util_new = ComputeKtUtilM(M, lambda1, psi_ord, mu,
                           alpha_1, pstream__);
            } 
          }
          current_statement__ = 318;
          if ((primitive_value(logical_gte(util_new, util)) ||
              primitive_value(logical_eq((M + 1), (nalts + 1))))) {
            current_statement__ = 296;
            if (logical_lt(util_new, util)) {
              current_statement__ = 295;
              M = (M + 1);
            } 
            current_statement__ = 297;
            lambda_l = (logical_lt(util_new, util) ?
                          stan::math::promote_scalar<local_scalar_t__>(0) :
                          stan::math::promote_scalar<local_scalar_t__>(lambda1));
            current_statement__ = 298;
            lambda_u = mu[(M - 1)];
            current_statement__ = 299;
            lambda1 = ((lambda_l + lambda_u) / 2);
            current_statement__ = 313;
            for (int n = 1; n <= max_loop; ++n) {
              local_scalar_t__ lambda_mid;
              lambda_mid = DUMMY_VAR__;
              
              current_statement__ = 300;
              lambda_mid = ((lambda_l + lambda_u) / 2);
              current_statement__ = 304;
              if (logical_lt(model_num, 5)) {
                current_statement__ = 303;
                util_new = ComputeUtilM(M, lambda1, g_psi_a, a_a_1, mu_a_a_1,
                             psi_ord, g__phi, price_ord, d,
                             model_num, pstream__);
              } else {
                current_statement__ = 302;
                if (logical_eq(model_num, 5)) {
                  current_statement__ = 301;
                  util_new = ComputeKtUtilM(M, lambda1, psi_ord, mu,
                               alpha_1, pstream__);
                } 
              }
              current_statement__ = 308;
              if (logical_lt(util_new, util)) {
                current_statement__ = 307;
                lambda_u = lambda_mid;
              } else {
                current_statement__ = 306;
                if (logical_gt(util_new, util)) {
                  current_statement__ = 305;
                  lambda_l = lambda_mid;
                } 
              }
              current_statement__ = 309;
              lambda1 = ((lambda_l + lambda_u) / 2);
              current_statement__ = 311;
              if (logical_lt(
                    stan::math::fabs(
                      (((lambda_l - lambda_u) / (lambda_l + lambda_u)) * 0.5)),
                    tol_l)) {
                break;
              } }
            current_statement__ = 315;
            for (int m = 1; m <= M; ++m) {
              current_statement__ = 314;
              assign(X, cons_list(index_uni(m), nil_index_list()),
                ((pow((lambda1 / mu[(m - 1)]), inv((a[(m - 1)] - 1))) -
                   d[(m - 1)]) * g__phi[(m - 1)]), "assigning variable X");}
            current_statement__ = 316;
            exit = 1;
          } else {
            current_statement__ = 294;
            if ((primitive_value(logical_lt(util_new, util)) &&
                primitive_value(logical_lt((M + 1), (nalts + 1))))) {
              current_statement__ = 293;
              M = (M + 1);
            } 
          }
        }
      } 
    }
    current_statement__ = 365;
    assign(hdemand, nil_index_list(),
      rvalue(X, cons_list(index_multi(order_x), nil_index_list()), "X"),
      "assigning variable hdemand");
    current_statement__ = 366;
    return hdemand;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct HicksianDemand_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T9__>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
T9__>>, -1, 1>
operator()(const T0__& util, const T1__& price, const T2__& MUzero,
           const T3__& phi, const T4__& gamma, const T5__& alpha,
           const int& nalts, const int& algo_gen, const int& model_num,
           const T9__& tol_l, const int& max_loop, std::ostream* pstream__)  const 
{
return HicksianDemand(util, price, MUzero, phi, gamma, alpha, nalts,
         algo_gen, model_num, tol_l, max_loop, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T17__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, T3__, T4__, stan::promote_args_t<T5__,
stan::value_type_t<T6__>, stan::value_type_t<T7__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
T17__>>>, -1, -1>
CalcWTP_rng(const T0__& income, const T1__& quant_j_arg__,
            const T2__& price_arg__,
            const std::vector<Eigen::Matrix<T3__, -1, 1>>& price_p_policy,
            const std::vector<Eigen::Matrix<T4__, -1, -1>>& psi_p_sims,
            const std::vector<Eigen::Matrix<T5__, -1, -1>>& phi_p_sims,
            const T6__& psi_sims_arg__, const T7__& phi_sims_arg__,
            const T8__& gamma_sims_arg__, const T9__& alpha_sims_arg__,
            const T10__& scale_sims_arg__, const int& nerrs,
            const int& cond_error, const int& draw_mlhs, const int& algo_gen,
            const int& model_num, const int& price_change_only,
            const T17__& tol, const int& max_loop, RNG& base_rng__,
            std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          T3__,
          T4__, stan::promote_args_t<T5__,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
          T17__>>>;
  const auto& quant_j = to_ref(quant_j_arg__);
  const auto& price = to_ref(price_arg__);
  const auto& psi_sims = to_ref(psi_sims_arg__);
  const auto& phi_sims = to_ref(phi_sims_arg__);
  const auto& gamma_sims = to_ref(gamma_sims_arg__);
  const auto& alpha_sims = to_ref(alpha_sims_arg__);
  const auto& scale_sims = to_ref(scale_sims_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nalts;
    nalts = std::numeric_limits<int>::min();
    
    current_statement__ = 368;
    nalts = num_elements(quant_j);
    int nsims;
    nsims = std::numeric_limits<int>::min();
    
    current_statement__ = 369;
    nsims = num_elements(scale_sims);
    int npols;
    npols = std::numeric_limits<int>::min();
    
    current_statement__ = 370;
    npols = stan::math::size(price_p_policy);
    current_statement__ = 371;
    validate_non_negative_index("wtp", "nsims", nsims);
    current_statement__ = 372;
    validate_non_negative_index("wtp", "npols", npols);
    Eigen::Matrix<local_scalar_t__, -1, -1> wtp;
    wtp = Eigen::Matrix<local_scalar_t__, -1, -1>(nsims, npols);
    stan::math::fill(wtp, DUMMY_VAR__);
    
    local_scalar_t__ quant_num;
    quant_num = DUMMY_VAR__;
    
    current_statement__ = 374;
    quant_num = (income -
                  multiply(transpose(quant_j),
                    rvalue(price,
                      cons_list(index_min_max(2, (nalts + 1)),
                        nil_index_list()), "price")));
    current_statement__ = 442;
    for (int sim = 1; sim <= nsims; ++sim) {
      current_statement__ = 375;
      validate_non_negative_index("psi_j", "nalts", nalts);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_j;
      psi_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
      stan::math::fill(psi_j, DUMMY_VAR__);
      
      current_statement__ = 376;
      assign(psi_j, nil_index_list(),
        transpose(
          rvalue(psi_sims, cons_list(index_uni(sim), nil_index_list()),
            "psi_sims")), "assigning variable psi_j");
      current_statement__ = 377;
      validate_non_negative_index("phi", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(phi, DUMMY_VAR__);
      
      current_statement__ = 379;
      validate_non_negative_index("psi_p_policy", "npols", npols);
      current_statement__ = 380;
      validate_non_negative_index("psi_p_policy", "nalts", nalts);
      Eigen::Matrix<local_scalar_t__, -1, -1> psi_p_policy;
      psi_p_policy = Eigen::Matrix<local_scalar_t__, -1, -1>(npols, nalts);
      stan::math::fill(psi_p_policy, DUMMY_VAR__);
      
      current_statement__ = 382;
      validate_non_negative_index("gamma", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(gamma, DUMMY_VAR__);
      
      current_statement__ = 383;
      assign(gamma, nil_index_list(),
        append_row(1,
          transpose(
            rvalue(gamma_sims, cons_list(index_uni(sim), nil_index_list()),
              "gamma_sims"))), "assigning variable gamma");
      current_statement__ = 384;
      validate_non_negative_index("alpha", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 385;
      assign(alpha, nil_index_list(),
        transpose(
          rvalue(alpha_sims, cons_list(index_uni(sim), nil_index_list()),
            "alpha_sims")), "assigning variable alpha");
      local_scalar_t__ scale;
      scale = DUMMY_VAR__;
      
      current_statement__ = 386;
      scale = scale_sims[(sim - 1)];
      current_statement__ = 387;
      validate_non_negative_index("error", "nerrs", nerrs);
      current_statement__ = 388;
      validate_non_negative_index("error", "nalts + 1", (nalts + 1));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> error;
      error = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(nerrs, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (nalts + 1)));
      stan::math::fill(error, DUMMY_VAR__);
      
      current_statement__ = 390;
      validate_non_negative_index("wtp_policy", "npols", npols);
      Eigen::Matrix<local_scalar_t__, -1, 1> wtp_policy;
      wtp_policy = Eigen::Matrix<local_scalar_t__, -1, 1>(npols);
      stan::math::fill(wtp_policy, DUMMY_VAR__);
      
      current_statement__ = 392;
      validate_non_negative_index("util", "nerrs", nerrs);
      Eigen::Matrix<local_scalar_t__, -1, 1> util;
      util = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
      stan::math::fill(util, DUMMY_VAR__);
      
      current_statement__ = 395;
      if (logical_eq(price_change_only, 0)) {
        current_statement__ = 394;
        assign(psi_p_policy, nil_index_list(), psi_p_sims[(sim - 1)],
          "assigning variable psi_p_policy");
      } 
      current_statement__ = 399;
      if (logical_lt(model_num, 5)) {
        current_statement__ = 398;
        assign(phi, nil_index_list(), rep_vector(1, (nalts + 1)),
          "assigning variable phi");
      } else {
        current_statement__ = 397;
        if (logical_eq(model_num, 5)) {
          current_statement__ = 396;
          assign(phi, nil_index_list(),
            append_row(1,
              transpose(
                rvalue(phi_sims, cons_list(index_uni(sim), nil_index_list()),
                  "phi_sims"))), "assigning variable phi");
        } 
      }
      current_statement__ = 400;
      assign(error, nil_index_list(),
        DrawError_rng(quant_num, quant_j,
          rvalue(price,
            cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
            "price"), psi_j,
          rvalue(phi,
            cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
            "phi"),
          rvalue(gamma,
            cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
            "gamma"), alpha, scale, model_num, nalts, nerrs, cond_error,
          draw_mlhs, base_rng__, pstream__), "assigning variable error");
      current_statement__ = 417;
      for (int err = 1; err <= nerrs; ++err) {
        current_statement__ = 401;
        validate_non_negative_index("mdemand", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mdemand;
        mdemand = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(mdemand, DUMMY_VAR__);
        
        current_statement__ = 403;
        validate_non_negative_index("MUzero_b", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> MUzero_b;
        MUzero_b = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(MUzero_b, DUMMY_VAR__);
        
        current_statement__ = 405;
        validate_non_negative_index("psi_b_err", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> psi_b_err;
        psi_b_err = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(psi_b_err, DUMMY_VAR__);
        
        current_statement__ = 406;
        assign(psi_b_err, nil_index_list(),
          stan::math::exp(add(append_row(0, psi_j), error[(err - 1)])),
          "assigning variable psi_b_err");
        current_statement__ = 407;
        assign(MUzero_b, nil_index_list(), elt_divide(psi_b_err, price),
          "assigning variable MUzero_b");
        current_statement__ = 409;
        if (logical_eq(model_num, 5)) {
          current_statement__ = 408;
          assign(MUzero_b, nil_index_list(),
            elt_divide(elt_multiply(stan::model::deep_copy(MUzero_b), phi),
              gamma), "assigning variable MUzero_b");
        } 
        current_statement__ = 414;
        if (logical_eq(cond_error, 1)) {
          current_statement__ = 412;
          assign(mdemand, nil_index_list(), append_row(quant_num, quant_j),
            "assigning variable mdemand");
        } else {
          current_statement__ = 411;
          if (logical_eq(cond_error, 0)) {
            current_statement__ = 410;
            assign(mdemand, nil_index_list(),
              MarshallianDemand(income, price, MUzero_b, phi, gamma, alpha,
                nalts, algo_gen, model_num, tol, max_loop, pstream__),
              "assigning variable mdemand");
          } 
        }
        current_statement__ = 415;
        assign(util, cons_list(index_uni(err), nil_index_list()),
          ComputeUtilJ(income,
            rvalue(mdemand,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "mdemand"),
            rvalue(price,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "price"), psi_b_err,
            rvalue(phi,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "phi"),
            rvalue(gamma,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "gamma"), alpha, nalts, model_num, pstream__),
          "assigning variable util");}
      current_statement__ = 439;
      for (int policy = 1; policy <= npols; ++policy) {
        current_statement__ = 418;
        validate_non_negative_index("price_p", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> price_p;
        price_p = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(price_p, DUMMY_VAR__);
        
        current_statement__ = 419;
        assign(price_p, nil_index_list(),
          add(price, price_p_policy[(policy - 1)]),
          "assigning variable price_p");
        current_statement__ = 420;
        validate_non_negative_index("psi_p", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, -1, 1> psi_p;
        psi_p = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
        stan::math::fill(psi_p, DUMMY_VAR__);
        
        current_statement__ = 422;
        validate_non_negative_index("wtp_err", "nerrs", nerrs);
        Eigen::Matrix<local_scalar_t__, -1, 1> wtp_err;
        wtp_err = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
        stan::math::fill(wtp_err, DUMMY_VAR__);
        
        current_statement__ = 426;
        if (logical_eq(price_change_only, 0)) {
          current_statement__ = 425;
          assign(psi_p, nil_index_list(),
            transpose(
              rvalue(psi_p_policy,
                cons_list(index_uni(policy), nil_index_list()),
                "psi_p_policy")), "assigning variable psi_p");
        } else {
          current_statement__ = 424;
          assign(psi_p, nil_index_list(), psi_j, "assigning variable psi_p");
        }
        current_statement__ = 436;
        for (int err = 1; err <= nerrs; ++err) {
          current_statement__ = 427;
          validate_non_negative_index("hdemand", "nalts + 1", (nalts + 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> hdemand;
          hdemand = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
          stan::math::fill(hdemand, DUMMY_VAR__);
          
          current_statement__ = 429;
          validate_non_negative_index("MUzero_p", "nalts + 1", (nalts + 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> MUzero_p;
          MUzero_p = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
          stan::math::fill(MUzero_p, DUMMY_VAR__);
          
          current_statement__ = 430;
          assign(MUzero_p, nil_index_list(),
            elt_divide(
              stan::math::exp(add(append_row(0, psi_p), error[(err - 1)])),
              price_p), "assigning variable MUzero_p");
          current_statement__ = 432;
          if (logical_eq(model_num, 5)) {
            current_statement__ = 431;
            assign(MUzero_p, nil_index_list(),
              elt_divide(elt_multiply(stan::model::deep_copy(MUzero_p), phi),
                gamma), "assigning variable MUzero_p");
          } 
          current_statement__ = 433;
          assign(hdemand, nil_index_list(),
            HicksianDemand(util[(err - 1)], price_p, MUzero_p, phi, gamma,
              alpha, nalts, algo_gen, model_num, tol, max_loop, pstream__),
            "assigning variable hdemand");
          current_statement__ = 434;
          assign(wtp_err, cons_list(index_uni(err), nil_index_list()),
            (income - multiply(transpose(price_p), hdemand)),
            "assigning variable wtp_err");}
        current_statement__ = 437;
        assign(wtp_policy, cons_list(index_uni(policy), nil_index_list()),
          mean(wtp_err), "assigning variable wtp_policy");}
      current_statement__ = 440;
      assign(wtp, cons_list(index_uni(sim), nil_index_list()),
        transpose(wtp_policy), "assigning variable wtp");}
    current_statement__ = 443;
    return wtp;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct CalcWTP_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T17__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, T3__, T4__, stan::promote_args_t<T5__,
stan::value_type_t<T6__>, stan::value_type_t<T7__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
T17__>>>, -1, -1>
operator()(const T0__& income, const T1__& quant_j, const T2__& price,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& price_p_policy,
           const std::vector<Eigen::Matrix<T4__, -1, -1>>& psi_p_sims,
           const std::vector<Eigen::Matrix<T5__, -1, -1>>& phi_p_sims,
           const T6__& psi_sims, const T7__& phi_sims,
           const T8__& gamma_sims, const T9__& alpha_sims,
           const T10__& scale_sims, const int& nerrs, const int& cond_error,
           const int& draw_mlhs, const int& algo_gen, const int& model_num,
           const int& price_change_only, const T17__& tol,
           const int& max_loop, RNG& base_rng__, std::ostream* pstream__)  const 
{
return CalcWTP_rng(income, quant_j, price, price_p_policy, psi_p_sims,
         phi_p_sims, psi_sims, phi_sims, gamma_sims, alpha_sims, scale_sims,
         nerrs, cond_error, draw_mlhs, algo_gen, model_num,
         price_change_only, tol, max_loop, base_rng__, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T17__, typename RNG>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, T3__, T4__, stan::promote_args_t<T5__,
stan::value_type_t<T6__>, stan::value_type_t<T7__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
T17__>>>, -1, -1>>
CalcMarshallianDemand_rng(const T0__& income, const T1__& quant_j_arg__,
                          const T2__& price_arg__,
                          const std::vector<Eigen::Matrix<T3__, -1, 1>>& price_p_policy,
                          const std::vector<Eigen::Matrix<T4__, -1, -1>>& psi_p_sims,
                          const std::vector<Eigen::Matrix<T5__, -1, -1>>& phi_p_sims,
                          const T6__& psi_sims_arg__,
                          const T7__& phi_sims_arg__,
                          const T8__& gamma_sims_arg__,
                          const T9__& alpha_sims_arg__,
                          const T10__& scale_sims_arg__, const int& nerrs,
                          const int& cond_error, const int& draw_mlhs,
                          const int& algo_gen, const int& model_num,
                          const int& price_change_only, const T17__& tol,
                          const int& max_loop, RNG& base_rng__,
                          std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          T3__,
          T4__, stan::promote_args_t<T5__,
          stan::value_type_t<T6__>,
          stan::value_type_t<T7__>,
          stan::value_type_t<T8__>,
          stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
          T17__>>>;
  const auto& quant_j = to_ref(quant_j_arg__);
  const auto& price = to_ref(price_arg__);
  const auto& psi_sims = to_ref(psi_sims_arg__);
  const auto& phi_sims = to_ref(phi_sims_arg__);
  const auto& gamma_sims = to_ref(gamma_sims_arg__);
  const auto& alpha_sims = to_ref(alpha_sims_arg__);
  const auto& scale_sims = to_ref(scale_sims_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nalts;
    nalts = std::numeric_limits<int>::min();
    
    current_statement__ = 445;
    nalts = num_elements(quant_j);
    int nsims;
    nsims = std::numeric_limits<int>::min();
    
    current_statement__ = 446;
    nsims = num_elements(scale_sims);
    int npols;
    npols = std::numeric_limits<int>::min();
    
    current_statement__ = 447;
    npols = stan::math::size(price_p_policy);
    current_statement__ = 448;
    validate_non_negative_index("mdemand_out", "nsims", nsims);
    current_statement__ = 449;
    validate_non_negative_index("mdemand_out", "npols", npols);
    current_statement__ = 450;
    validate_non_negative_index("mdemand_out", "nalts + 1", (nalts + 1));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>> mdemand_out;
    mdemand_out = std::vector<Eigen::Matrix<local_scalar_t__, -1, -1>>(nsims, Eigen::Matrix<local_scalar_t__, -1, -1>(npols, 
      (nalts + 1)));
    stan::math::fill(mdemand_out, DUMMY_VAR__);
    
    local_scalar_t__ quant_num;
    quant_num = DUMMY_VAR__;
    
    current_statement__ = 452;
    quant_num = (income -
                  multiply(transpose(quant_j),
                    rvalue(price,
                      cons_list(index_min_max(2, (nalts + 1)),
                        nil_index_list()), "price")));
    current_statement__ = 518;
    for (int sim = 1; sim <= nsims; ++sim) {
      current_statement__ = 453;
      validate_non_negative_index("psi_j", "nalts", nalts);
      Eigen::Matrix<local_scalar_t__, -1, 1> psi_j;
      psi_j = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
      stan::math::fill(psi_j, DUMMY_VAR__);
      
      current_statement__ = 454;
      assign(psi_j, nil_index_list(),
        transpose(
          rvalue(psi_sims, cons_list(index_uni(sim), nil_index_list()),
            "psi_sims")), "assigning variable psi_j");
      current_statement__ = 455;
      validate_non_negative_index("phi", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> phi;
      phi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(phi, DUMMY_VAR__);
      
      current_statement__ = 457;
      validate_non_negative_index("psi_p_policy", "npols", npols);
      current_statement__ = 458;
      validate_non_negative_index("psi_p_policy", "nalts", nalts);
      Eigen::Matrix<local_scalar_t__, -1, -1> psi_p_policy;
      psi_p_policy = Eigen::Matrix<local_scalar_t__, -1, -1>(npols, nalts);
      stan::math::fill(psi_p_policy, DUMMY_VAR__);
      
      current_statement__ = 460;
      validate_non_negative_index("gamma", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
      gamma = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(gamma, DUMMY_VAR__);
      
      current_statement__ = 461;
      assign(gamma, nil_index_list(),
        append_row(1,
          transpose(
            rvalue(gamma_sims, cons_list(index_uni(sim), nil_index_list()),
              "gamma_sims"))), "assigning variable gamma");
      current_statement__ = 462;
      validate_non_negative_index("alpha", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      alpha = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(alpha, DUMMY_VAR__);
      
      current_statement__ = 463;
      assign(alpha, nil_index_list(),
        transpose(
          rvalue(alpha_sims, cons_list(index_uni(sim), nil_index_list()),
            "alpha_sims")), "assigning variable alpha");
      local_scalar_t__ scale;
      scale = DUMMY_VAR__;
      
      current_statement__ = 464;
      scale = scale_sims[(sim - 1)];
      current_statement__ = 465;
      validate_non_negative_index("error", "nerrs", nerrs);
      current_statement__ = 466;
      validate_non_negative_index("error", "nalts + 1", (nalts + 1));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> error;
      error = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(nerrs, Eigen::Matrix<local_scalar_t__, -1, 1>(
        (nalts + 1)));
      stan::math::fill(error, DUMMY_VAR__);
      
      current_statement__ = 468;
      validate_non_negative_index("mdemand_pols", "npols", npols);
      current_statement__ = 469;
      validate_non_negative_index("mdemand_pols", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, -1> mdemand_pols;
      mdemand_pols = Eigen::Matrix<local_scalar_t__, -1, -1>(npols, (nalts +
                                                                    1));
      stan::math::fill(mdemand_pols, DUMMY_VAR__);
      
      current_statement__ = 471;
      validate_non_negative_index("util", "nerrs", nerrs);
      Eigen::Matrix<local_scalar_t__, -1, 1> util;
      util = Eigen::Matrix<local_scalar_t__, -1, 1>(nerrs);
      stan::math::fill(util, DUMMY_VAR__);
      
      current_statement__ = 474;
      if (logical_eq(price_change_only, 0)) {
        current_statement__ = 473;
        assign(psi_p_policy, nil_index_list(), psi_p_sims[(sim - 1)],
          "assigning variable psi_p_policy");
      } 
      current_statement__ = 478;
      if (logical_lt(model_num, 5)) {
        current_statement__ = 477;
        assign(phi, nil_index_list(), rep_vector(1, (nalts + 1)),
          "assigning variable phi");
      } else {
        current_statement__ = 476;
        if (logical_eq(model_num, 5)) {
          current_statement__ = 475;
          assign(phi, nil_index_list(),
            append_row(1,
              transpose(
                rvalue(phi_sims, cons_list(index_uni(sim), nil_index_list()),
                  "phi_sims"))), "assigning variable phi");
        } 
      }
      current_statement__ = 479;
      assign(error, nil_index_list(),
        DrawError_rng(quant_num, quant_j,
          rvalue(price,
            cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
            "price"), psi_j,
          rvalue(phi,
            cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
            "phi"),
          rvalue(gamma,
            cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
            "gamma"), alpha, scale, model_num, nalts, nerrs, cond_error,
          draw_mlhs, base_rng__, pstream__), "assigning variable error");
      current_statement__ = 496;
      for (int err = 1; err <= nerrs; ++err) {
        current_statement__ = 480;
        validate_non_negative_index("mdemand_util", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mdemand_util;
        mdemand_util = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(mdemand_util, DUMMY_VAR__);
        
        current_statement__ = 482;
        validate_non_negative_index("MUzero_b", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> MUzero_b;
        MUzero_b = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(MUzero_b, DUMMY_VAR__);
        
        current_statement__ = 484;
        validate_non_negative_index("psi_b_err", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> psi_b_err;
        psi_b_err = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(psi_b_err, DUMMY_VAR__);
        
        current_statement__ = 485;
        assign(psi_b_err, nil_index_list(),
          stan::math::exp(add(append_row(0, psi_j), error[(err - 1)])),
          "assigning variable psi_b_err");
        current_statement__ = 486;
        assign(MUzero_b, nil_index_list(), elt_divide(psi_b_err, price),
          "assigning variable MUzero_b");
        current_statement__ = 488;
        if (logical_eq(model_num, 5)) {
          current_statement__ = 487;
          assign(MUzero_b, nil_index_list(),
            elt_divide(elt_multiply(stan::model::deep_copy(MUzero_b), phi),
              gamma), "assigning variable MUzero_b");
        } 
        current_statement__ = 493;
        if (logical_eq(cond_error, 1)) {
          current_statement__ = 491;
          assign(mdemand_util, nil_index_list(),
            append_row(quant_num, quant_j), "assigning variable mdemand_util");
        } else {
          current_statement__ = 490;
          if (logical_eq(cond_error, 0)) {
            current_statement__ = 489;
            assign(mdemand_util, nil_index_list(),
              MarshallianDemand(income, price, MUzero_b, phi, gamma, alpha,
                nalts, algo_gen, model_num, tol, max_loop, pstream__),
              "assigning variable mdemand_util");
          } 
        }
        current_statement__ = 494;
        assign(util, cons_list(index_uni(err), nil_index_list()),
          ComputeUtilJ(income,
            rvalue(mdemand_util,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "mdemand_util"),
            rvalue(price,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "price"), psi_b_err,
            rvalue(phi,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "phi"),
            rvalue(gamma,
              cons_list(index_min_max(2, (nalts + 1)), nil_index_list()),
              "gamma"), alpha, nalts, model_num, pstream__),
          "assigning variable util");}
      current_statement__ = 515;
      for (int policy = 1; policy <= npols; ++policy) {
        current_statement__ = 497;
        validate_non_negative_index("price_p", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> price_p;
        price_p = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(price_p, DUMMY_VAR__);
        
        current_statement__ = 498;
        assign(price_p, nil_index_list(),
          add(price, price_p_policy[(policy - 1)]),
          "assigning variable price_p");
        current_statement__ = 499;
        validate_non_negative_index("psi_p", "nalts", nalts);
        Eigen::Matrix<local_scalar_t__, -1, 1> psi_p;
        psi_p = Eigen::Matrix<local_scalar_t__, -1, 1>(nalts);
        stan::math::fill(psi_p, DUMMY_VAR__);
        
        current_statement__ = 501;
        validate_non_negative_index("mdemand_p", "nalts + 1", (nalts + 1));
        Eigen::Matrix<local_scalar_t__, -1, 1> mdemand_p;
        mdemand_p = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
        stan::math::fill(mdemand_p, DUMMY_VAR__);
        
        current_statement__ = 502;
        assign(mdemand_p, nil_index_list(), rep_vector(0, (nalts + 1)),
          "assigning variable mdemand_p");
        current_statement__ = 505;
        if (logical_eq(price_change_only, 0)) {
          current_statement__ = 504;
          assign(psi_p, nil_index_list(),
            transpose(
              rvalue(psi_p_policy,
                cons_list(index_uni(policy), nil_index_list()),
                "psi_p_policy")), "assigning variable psi_p");
        } else {
          current_statement__ = 503;
          assign(psi_p, nil_index_list(), psi_j, "assigning variable psi_p");
        }
        current_statement__ = 512;
        for (int err = 1; err <= nerrs; ++err) {
          current_statement__ = 506;
          validate_non_negative_index("MUzero_p", "nalts + 1", (nalts + 1));
          Eigen::Matrix<local_scalar_t__, -1, 1> MUzero_p;
          MUzero_p = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
          stan::math::fill(MUzero_p, DUMMY_VAR__);
          
          current_statement__ = 507;
          assign(MUzero_p, nil_index_list(),
            elt_divide(
              stan::math::exp(add(append_row(0, psi_p), error[(err - 1)])),
              price_p), "assigning variable MUzero_p");
          current_statement__ = 509;
          if (logical_eq(model_num, 5)) {
            current_statement__ = 508;
            assign(MUzero_p, nil_index_list(),
              elt_divide(elt_multiply(stan::model::deep_copy(MUzero_p), phi),
                gamma), "assigning variable MUzero_p");
          } 
          current_statement__ = 510;
          assign(mdemand_p, nil_index_list(),
            add(stan::model::deep_copy(mdemand_p),
              divide(
                MarshallianDemand(income, price_p, MUzero_p, phi, gamma,
                  alpha, nalts, algo_gen, model_num, tol,
                  max_loop, pstream__), nerrs)),
            "assigning variable mdemand_p");}
        current_statement__ = 513;
        assign(mdemand_pols, cons_list(index_uni(policy), nil_index_list()),
          transpose(mdemand_p), "assigning variable mdemand_pols");}
      current_statement__ = 516;
      assign(mdemand_out, cons_list(index_uni(sim), nil_index_list()),
        mdemand_pols, "assigning variable mdemand_out");}
    current_statement__ = 519;
    return mdemand_out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct CalcMarshallianDemand_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T7__, typename T8__,
typename T9__, typename T10__, typename T17__, typename RNG>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, T3__, T4__, stan::promote_args_t<T5__,
stan::value_type_t<T6__>, stan::value_type_t<T7__>, stan::value_type_t<T8__>,
stan::value_type_t<T9__>, stan::promote_args_t<stan::value_type_t<T10__>,
T17__>>>, -1, -1>>
operator()(const T0__& income, const T1__& quant_j, const T2__& price,
           const std::vector<Eigen::Matrix<T3__, -1, 1>>& price_p_policy,
           const std::vector<Eigen::Matrix<T4__, -1, -1>>& psi_p_sims,
           const std::vector<Eigen::Matrix<T5__, -1, -1>>& phi_p_sims,
           const T6__& psi_sims, const T7__& phi_sims,
           const T8__& gamma_sims, const T9__& alpha_sims,
           const T10__& scale_sims, const int& nerrs, const int& cond_error,
           const int& draw_mlhs, const int& algo_gen, const int& model_num,
           const int& price_change_only, const T17__& tol,
           const int& max_loop, RNG& base_rng__, std::ostream* pstream__)  const 
{
return CalcMarshallianDemand_rng(income, quant_j, price, price_p_policy,
         psi_p_sims, phi_p_sims, psi_sims, phi_sims, gamma_sims, alpha_sims,
         scale_sims, nerrs, cond_error, draw_mlhs, algo_gen, model_num,
         price_change_only, tol, max_loop, base_rng__, pstream__);
}
};
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T10__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
T6__,
T10__>>, -1, 1>
CalcmdemandOne_rng(const T0__& income, const T1__& price_arg__,
                   const T2__& psi_j_arg__, const T3__& phi_j_arg__,
                   const T4__& gamma_j_arg__, const T5__& alpha_arg__,
                   const T6__& scale, const int& nerrs, const int& model_num,
                   const int& algo_gen, const T10__& tol,
                   const int& max_loop, RNG& base_rng__,
                   std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
          stan::value_type_t<T1__>,
          stan::value_type_t<T2__>,
          stan::value_type_t<T3__>,
          stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
          T6__,
          T10__>>;
  const auto& price = to_ref(price_arg__);
  const auto& psi_j = to_ref(psi_j_arg__);
  const auto& phi_j = to_ref(phi_j_arg__);
  const auto& gamma_j = to_ref(gamma_j_arg__);
  const auto& alpha = to_ref(alpha_arg__);
  const static bool propto__ = true;
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  (void) DUMMY_VAR__;  // suppress unused var warning
  
  try {
    int nalts;
    nalts = std::numeric_limits<int>::min();
    
    current_statement__ = 521;
    nalts = (num_elements(price) - 1);
    current_statement__ = 522;
    validate_non_negative_index("mdemand", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> mdemand;
    mdemand = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(mdemand, DUMMY_VAR__);
    
    current_statement__ = 523;
    assign(mdemand, nil_index_list(), rep_vector(0, (nalts + 1)),
      "assigning variable mdemand");
    current_statement__ = 524;
    validate_non_negative_index("gamma", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> gamma;
    gamma = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(gamma, DUMMY_VAR__);
    
    current_statement__ = 525;
    assign(gamma, nil_index_list(), append_row(1, gamma_j),
      "assigning variable gamma");
    current_statement__ = 526;
    validate_non_negative_index("phi", "nalts + 1", (nalts + 1));
    Eigen::Matrix<local_scalar_t__, -1, 1> phi;
    phi = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
    stan::math::fill(phi, DUMMY_VAR__);
    
    current_statement__ = 528;
    validate_non_negative_index("error", "nerrs", nerrs);
    current_statement__ = 529;
    validate_non_negative_index("error", "nalts + 1", (nalts + 1));
    std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> error;
    error = std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(nerrs, Eigen::Matrix<local_scalar_t__, -1, 1>(
      (nalts + 1)));
    stan::math::fill(error, DUMMY_VAR__);
    
    current_statement__ = 534;
    if (logical_lt(model_num, 5)) {
      current_statement__ = 533;
      assign(phi, nil_index_list(), rep_vector(1, (nalts + 1)),
        "assigning variable phi");
    } else {
      current_statement__ = 532;
      if (logical_eq(model_num, 5)) {
        current_statement__ = 531;
        assign(phi, nil_index_list(), append_row(1, phi_j),
          "assigning variable phi");
      } 
    }
    current_statement__ = 537;
    for (int err = 1; err <= nerrs; ++err) {
      current_statement__ = 536;
      for (int g = 1; g <= (nalts + 1); ++g) {
        current_statement__ = 535;
        assign(error,
          cons_list(index_uni(err),
            cons_list(index_uni(g), nil_index_list())),
          (-stan::math::log(-stan::math::log(uniform_rng(0, 1, base_rng__)))
            * scale), "assigning variable error");}}
    current_statement__ = 544;
    for (int err = 1; err <= nerrs; ++err) {
      current_statement__ = 538;
      validate_non_negative_index("MUzero_b", "nalts + 1", (nalts + 1));
      Eigen::Matrix<local_scalar_t__, -1, 1> MUzero_b;
      MUzero_b = Eigen::Matrix<local_scalar_t__, -1, 1>((nalts + 1));
      stan::math::fill(MUzero_b, DUMMY_VAR__);
      
      current_statement__ = 539;
      assign(MUzero_b, nil_index_list(),
        elt_divide(
          stan::math::exp(add(append_row(0, psi_j), error[(err - 1)])),
          price), "assigning variable MUzero_b");
      current_statement__ = 541;
      if (logical_eq(model_num, 5)) {
        current_statement__ = 540;
        assign(MUzero_b, nil_index_list(),
          elt_divide(elt_multiply(stan::model::deep_copy(MUzero_b), phi),
            gamma), "assigning variable MUzero_b");
      } 
      current_statement__ = 542;
      assign(mdemand, nil_index_list(),
        add(stan::model::deep_copy(mdemand),
          divide(
            MarshallianDemand(income, price, MUzero_b, phi, gamma, alpha,
              nalts, algo_gen, model_num, tol, max_loop, pstream__), nerrs)),
        "assigning variable mdemand");}
    current_statement__ = 545;
    return mdemand;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
  }
  
}
struct CalcmdemandOne_rng_functor__ {
template <typename T0__, typename T1__, typename T2__, typename T3__,
typename T4__, typename T5__, typename T6__, typename T10__, typename RNG>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
stan::value_type_t<T2__>, stan::value_type_t<T3__>,
stan::value_type_t<T4__>, stan::promote_args_t<stan::value_type_t<T5__>,
T6__,
T10__>>, -1, 1>
operator()(const T0__& income, const T1__& price, const T2__& psi_j,
           const T3__& phi_j, const T4__& gamma_j, const T5__& alpha,
           const T6__& scale, const int& nerrs, const int& model_num,
           const int& algo_gen, const T10__& tol, const int& max_loop,
           RNG& base_rng__, std::ostream* pstream__)  const 
{
return CalcmdemandOne_rng(income, price, psi_j, phi_j, gamma_j, alpha, scale,
         nerrs, model_num, algo_gen, tol, max_loop, base_rng__, pstream__);
}
};
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>>, -1, 1>  Shuffle_rng(const Eigen::Matrix<double, -1, 1>& inv_temp,
                 const int& nerrs, boost::ecuyer1988& base_rng__,
                 std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::Shuffle_rng(
                                                              inv_temp,
                                                              nerrs,
                                                              base_rng__,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<double, -1, 1>  DrawMlhs_rng(const int& nerrs, const int& draw_mlhs,
                  boost::ecuyer1988& base_rng__,
                  std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::DrawMlhs_rng(
                                                              nerrs,
                                                              draw_mlhs,
                                                              base_rng__,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<Eigen::Matrix<stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>, double>>, -1, 1>>  DrawError_rng(const double& quant_num,
                   const Eigen::Matrix<double, -1, 1>& quant_j,
                   const Eigen::Matrix<double, -1, 1>& price_j,
                   const Eigen::Matrix<double, -1, 1>& psi_j,
                   const Eigen::Matrix<double, -1, 1>& phi_j,
                   const Eigen::Matrix<double, -1, 1>& gamma_j,
                   const Eigen::Matrix<double, -1, 1>& alpha,
                   const double& scale, const int& model_num,
                   const int& nalts, const int& nerrs, const int& cond_error,
                   const int& draw_mlhs, boost::ecuyer1988& base_rng__,
                   std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::DrawError_rng(
                                                              quant_num,
                                                              quant_j,
                                                              price_j, psi_j,
                                                              phi_j, gamma_j,
                                                              alpha, scale,
                                                              model_num,
                                                              nalts, nerrs,
                                                              cond_error,
                                                              draw_mlhs,
                                                              base_rng__,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<int>  CalcAltOrder(const Eigen::Matrix<double, -1, 1>& MUzero,
                  const int& nalts, std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::CalcAltOrder(
                                                              MUzero, nalts,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>>, -1, -1>  SortParmMatrix(const Eigen::Matrix<double, -1, 1>& MUzero,
                    const Eigen::Matrix<double, -1, 1>& price,
                    const Eigen::Matrix<double, -1, 1>& gamma,
                    const Eigen::Matrix<double, -1, 1>& alpha_phi,
                    const int& nalts, std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::SortParmMatrix(
                                                              MUzero, price,
                                                              gamma,
                                                              alpha_phi,
                                                              nalts,
                                                              pstream__);
}
// [[Rcpp::export]]
 stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>>  ComputeE(const int& M, const double& lambda,
              const Eigen::Matrix<double, -1, 1>& g_price__phi,
              const Eigen::Matrix<double, -1, 1>& b,
              const Eigen::Matrix<double, -1, 1>& c,
              const Eigen::Matrix<double, -1, 1>& d,
              std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::ComputeE(M,
                                                              lambda,
                                                              g_price__phi,
                                                              b, c, d,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, double>>, -1, 1>  MarshallianDemand(const double& income,
                       const Eigen::Matrix<double, -1, 1>& price,
                       const Eigen::Matrix<double, -1, 1>& MUzero,
                       const Eigen::Matrix<double, -1, 1>& phi,
                       const Eigen::Matrix<double, -1, 1>& gamma,
                       const Eigen::Matrix<double, -1, 1>& alpha,
                       const int& nalts, const int& algo_gen,
                       const int& model_num, const double& tol_e,
                       const int& max_loop, std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::MarshallianDemand(
                                                              income, price,
                                                              MUzero, phi,
                                                              gamma, alpha,
                                                              nalts,
                                                              algo_gen,
                                                              model_num,
                                                              tol_e,
                                                              max_loop,
                                                              pstream__);
}
// [[Rcpp::export]]
 stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>>>  ComputeUtilJ(const double& income,
                  const Eigen::Matrix<double, -1, 1>& quant_j,
                  const Eigen::Matrix<double, -1, 1>& price_j,
                  const Eigen::Matrix<double, -1, 1>& psi,
                  const Eigen::Matrix<double, -1, 1>& phi_j,
                  const Eigen::Matrix<double, -1, 1>& gamma_j,
                  const Eigen::Matrix<double, -1, 1>& alpha,
                  const int& nalts, const int& model_num,
                  std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::ComputeUtilJ(
                                                              income,
                                                              quant_j,
                                                              price_j, psi,
                                                              phi_j, gamma_j,
                                                              alpha, nalts,
                                                              model_num,
                                                              pstream__);
}
// [[Rcpp::export]]
 stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>>>  ComputeUtilM(const int& M, const double& lambda1,
                  const Eigen::Matrix<double, -1, 1>& g_psi_a,
                  const Eigen::Matrix<double, -1, 1>& a_a_1,
                  const Eigen::Matrix<double, -1, 1>& mu_a_a_1,
                  const Eigen::Matrix<double, -1, 1>& psi,
                  const Eigen::Matrix<double, -1, 1>& g,
                  const Eigen::Matrix<double, -1, 1>& price,
                  const Eigen::Matrix<double, -1, 1>& d,
                  const int& model_num, std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::ComputeUtilM(M,
                                                              lambda1,
                                                              g_psi_a, a_a_1,
                                                              mu_a_a_1, psi,
                                                              g, price, d,
                                                              model_num,
                                                              pstream__);
}
// [[Rcpp::export]]
 stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, double>  ComputeKtUtilM(const int& M, const double& lambda1,
                    const Eigen::Matrix<double, -1, 1>& psi,
                    const Eigen::Matrix<double, -1, 1>& mu,
                    const double& alpha_1, std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::ComputeKtUtilM(M,
                                                              lambda1, psi,
                                                              mu, alpha_1,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, double>>, -1, 1>  HicksianDemand(const double& util,
                    const Eigen::Matrix<double, -1, 1>& price,
                    const Eigen::Matrix<double, -1, 1>& MUzero,
                    const Eigen::Matrix<double, -1, 1>& phi,
                    const Eigen::Matrix<double, -1, 1>& gamma,
                    const Eigen::Matrix<double, -1, 1>& alpha,
                    const int& nalts, const int& algo_gen,
                    const int& model_num, const double& tol_l,
                    const int& max_loop, std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::HicksianDemand(
                                                              util, price,
                                                              MUzero, phi,
                                                              gamma, alpha,
                                                              nalts,
                                                              algo_gen,
                                                              model_num,
                                                              tol_l,
                                                              max_loop,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, double, double, stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, double>>>, -1, -1>  CalcWTP_rng(const double& income,
                 const Eigen::Matrix<double, -1, 1>& quant_j,
                 const Eigen::Matrix<double, -1, 1>& price,
                 const std::vector<Eigen::Matrix<double, -1, 1>>& price_p_policy,
                 const std::vector<Eigen::Matrix<double, -1, -1>>& psi_p_sims,
                 const std::vector<Eigen::Matrix<double, -1, -1>>& phi_p_sims,
                 const Eigen::Matrix<double, -1, -1>& psi_sims,
                 const Eigen::Matrix<double, -1, -1>& phi_sims,
                 const Eigen::Matrix<double, -1, -1>& gamma_sims,
                 const Eigen::Matrix<double, -1, -1>& alpha_sims,
                 const Eigen::Matrix<double, -1, 1>& scale_sims,
                 const int& nerrs, const int& cond_error,
                 const int& draw_mlhs, const int& algo_gen,
                 const int& model_num, const int& price_change_only,
                 const double& tol, const int& max_loop,
                 boost::ecuyer1988& base_rng__,
                 std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::CalcWTP_rng(
                                                              income,
                                                              quant_j, price,
                                                              price_p_policy,
                                                              psi_p_sims,
                                                              phi_p_sims,
                                                              psi_sims,
                                                              phi_sims,
                                                              gamma_sims,
                                                              alpha_sims,
                                                              scale_sims,
                                                              nerrs,
                                                              cond_error,
                                                              draw_mlhs,
                                                              algo_gen,
                                                              model_num,
                                                              price_change_only,
                                                              tol, max_loop,
                                                              base_rng__,
                                                              pstream__);
}
// [[Rcpp::export]]
 std::vector<Eigen::Matrix<stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, double, double, stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, double>>>, -1, -1>>  CalcMarshallianDemand_rng(const double& income,
                               const Eigen::Matrix<double, -1, 1>& quant_j,
                               const Eigen::Matrix<double, -1, 1>& price,
                               const std::vector<Eigen::Matrix<double, -1, 1>>& price_p_policy,
                               const std::vector<Eigen::Matrix<double, -1, -1>>& psi_p_sims,
                               const std::vector<Eigen::Matrix<double, -1, -1>>& phi_p_sims,
                               const Eigen::Matrix<double, -1, -1>& psi_sims,
                               const Eigen::Matrix<double, -1, -1>& phi_sims,
                               const Eigen::Matrix<double, -1, -1>& gamma_sims,
                               const Eigen::Matrix<double, -1, -1>& alpha_sims,
                               const Eigen::Matrix<double, -1, 1>& scale_sims,
                               const int& nerrs, const int& cond_error,
                               const int& draw_mlhs, const int& algo_gen,
                               const int& model_num,
                               const int& price_change_only,
                               const double& tol, const int& max_loop,
                               boost::ecuyer1988& base_rng__,
                               std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::CalcMarshallianDemand_rng(
                                                              income,
                                                              quant_j, price,
                                                              price_p_policy,
                                                              psi_p_sims,
                                                              phi_p_sims,
                                                              psi_sims,
                                                              phi_sims,
                                                              gamma_sims,
                                                              alpha_sims,
                                                              scale_sims,
                                                              nerrs,
                                                              cond_error,
                                                              draw_mlhs,
                                                              algo_gen,
                                                              model_num,
                                                              price_change_only,
                                                              tol, max_loop,
                                                              base_rng__,
                                                              pstream__);
}
// [[Rcpp::export]]
 Eigen::Matrix<stan::promote_args_t<double, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::value_type_t<double>, stan::promote_args_t<stan::value_type_t<double>, double, double>>, -1, 1>  CalcmdemandOne_rng(const double& income,
                        const Eigen::Matrix<double, -1, 1>& price,
                        const Eigen::Matrix<double, -1, 1>& psi_j,
                        const Eigen::Matrix<double, -1, 1>& phi_j,
                        const Eigen::Matrix<double, -1, 1>& gamma_j,
                        const Eigen::Matrix<double, -1, 1>& alpha,
                        const double& scale, const int& nerrs,
                        const int& model_num, const int& algo_gen,
                        const double& tol, const int& max_loop,
                        boost::ecuyer1988& base_rng__,
                        std::ostream* pstream__ = 0)  
{
 return model3a1435a46710_User_defined_functions_namespace::CalcmdemandOne_rng(
                                                              income, price,
                                                              psi_j, phi_j,
                                                              gamma_j, alpha,
                                                              scale, nerrs,
                                                              model_num,
                                                              algo_gen, tol,
                                                              max_loop,
                                                              base_rng__,
                                                              pstream__);
}
